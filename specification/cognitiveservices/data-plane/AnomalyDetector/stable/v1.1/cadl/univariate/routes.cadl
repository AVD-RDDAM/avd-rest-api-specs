import "@azure-tools/cadl-azure-core";
import "@cadl-lang/rest";
import "./models.cadl";

using Cadl.Rest;
using Cadl.Http;

namespace AnomalyDetector.Univariate;

interface Univariate {
  @post
  @route("timeseries/entire/detect")
  @summary("Detect anomalies for the entire series in batch.")
  @doc("""
  This operation generates a model with an entire series, each point is detected
  with the same model. With this method, points before and after a certain point
  are used to determine whether it is an anomaly. The entire detection can give
  user an overall status of the time series.
  """)
  // FIXME: use this operation definition once errors can be modified
  // op DetectEntireSeries is Azure.Core.Foundations.Operation<DetectRequest, EntireDetectResponse>;
  op DetectEntireSeries(
    @body body: DetectRequest,
  ): EntireDetectResponse | AnomalyDetectorError;

  @post
  @route("timeseries/last/detect")
  @summary("Detect anomaly status of the latest point in time series.")
  @doc("""
  This operation generates a model using the points that you sent into the API,
  and based on all data to determine whether the last point is anomalous.
  """)
  // FIXME: use this operation definition once errors can be modified
  // op DetectLastPoint is Azure.Core.Foundations.Operation<DetectRequest, LastDetectResponse>;
  op DetectLastPoint(
    @body body: DetectRequest,
  ): LastDetectResponse | AnomalyDetectorError;

  @post
  @route("timeseries/changepoint/detect")
  @summary("Detect change point for the entire series")
  @doc("Evaluate change point score of every series point")
  // FIXME: use this operation definition once errors can be modified
  // op DetectChangePoint is Azure.Core.Foundations.Operation<ChangePointDetectRequest, ChangePointDetectResponse>;
  op DetectChangePoint(
    @body body: ChangePointDetectRequest,
  ): ChangePointDetectResponse | AnomalyDetectorError;
}

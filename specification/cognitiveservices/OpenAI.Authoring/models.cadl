import "@cadl-lang/rest";
import "@azure-tools/cadl-azure-core";

using Cadl.Rest;
using Azure.Core;

namespace Azure.OpenAI;

enum TypeDiscriminatorKnownValues {
  List: "list",
  FineTune: "fine-tune",
  File: "file",
  FineTuneEvent: "fine-tune-event",
  Model: "model",
  Deployment: "deployment",
}

@knownValues(TypeDiscriminatorKnownValues)
model TypeDiscriminator is string;

enum ScaleTypeKnownValues {
  Manual: "manual",
  Standard: "standard",
}

@knownValues(ScaleTypeKnownValues)
model ScaleType is string;

enum ErrorCodeKnownValues {
  Conflict: "conflict",
  InvalidPayload: "invalidPayload",
  Forbidden: "forbidden",
  NotFound: "notFound",
  UnexpectedEntityState: "unexpectedEntityState",
  ItemDoesAlreadyExist: "itemDoesAlreadyExist",
  ServiceUnavailable: "serviceUnavailable",
  InternalFailure: "internalFailure",
  QuotaExceeded: "quotaExceeded",
}

@knownValues(ErrorCodeKnownValues)
model ErrorCode is string;

enum InnerErrorCodeKnownValues {
  InvalidPayload: "invalidPayload",
}

@knownValues(InnerErrorCodeKnownValues)
model InnerErrorCode is string;

enum PurposeKnownValues {
  FineTune: "fine-tune",
  FineTuneResults: "fine-tune-results",
}

@knownValues(PurposeKnownValues)
model Purpose is string;

enum State {
  NotRunning: "notRunning",
  Running: "running",
  Succeeded: "succeeded",
  Canceled: "canceled",
  Failed: "failed",
  Deleted: "deleted",
}

enum LogLevel {
  Info: "info",
  Warning: "warning",
  Error: "error",
}

@doc("Represents a list of deployments.")
model DeploymentList {
  @doc("Defines the type of an object.")
  @visibility("read")
  object?: TypeDiscriminator;

  @doc("The list of items.")
  @visibility("read")
  data?: Deployment[];
}

@doc("""
Deployments manage the reserved quota for Azure OpenAI models and make them
available for inference requests.
""")
@resource("deployments")
model Deployment {
  @doc("Defines the type of an object.")
  @visibility("read")
  object?: TypeDiscriminator;

  @doc("The state of a job or item.")
  @visibility("read")
  status?: State;

  @doc("A timestamp when this job or item was created (in unix epochs).")
  @visibility("read")
  created_at?: int32;

  @doc("A timestamp when this job or item was modified last (in unix epochs).")
  @visibility("read")
  updated_at?: int32;

  @doc("The identifier of the deployment")
  @key("deploymentId")
  @visibility("read")
  id: string;

  @doc("The OpenAI model to deploy. Can be a base model or a fine tune.")
  "model"?: string;

  @doc("""
The owner of this deployment. For Azure OpenAI only \"organization-owner\" is
supported.
""")
  @visibility("read")
  owner?: string;

  @doc("""
The scale settings of a deployment. It defines the modes for scaling and the
reserved capacity.
""")
  scale_settings: ScaleSettings;
}

@doc("""
The scale settings of a deployment. It defines the modes for scaling and the
reserved capacity.
""")
@discriminator("scale_type")
model ScaleSettings {}

@doc("""
Error response as defined in the Microsoft REST
guidelines
(https://github.com/microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses).
""")
@error
model ErrorResponse {
  @doc("""
Error content as defined in the Microsoft REST
guidelines
(https://github.com/microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses).
""")
  error?: Error;
}

@doc("""
Error content as defined in the Microsoft REST
guidelines
(https://github.com/microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses).
""")
model Error {
  @doc("""
Error codes as defined in the Microsoft REST
guidelines
(https://github.com/microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses).
""")
  code: ErrorCode;

  @doc("The message of this error.")
  message: string;

  @doc("The location where the error happened if available.")
  target?: string;

  @doc("The error details if available.")
  details?: Error[];

  @doc("""
Inner error as defined in the Microsoft REST
guidelines
(https://github.com/microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses).
""")
  innererror?: InnerError;
}

@doc("""
Inner error as defined in the Microsoft REST
guidelines
(https://github.com/microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses).
""")
model InnerError {
  @doc("""
Inner error codes as defined in the Microsoft REST
guidelines
(https://github.com/microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses).
""")
  code?: InnerErrorCode;

  @doc("""
Inner error as defined in the Microsoft REST
guidelines
(https://github.com/microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses).
""")
  innererror?: InnerError;
}

@doc("Defines changes to the deployment.")
model DeploymentUpdate {
  @doc("""
The new OpenAI model to be used for this deployment. Can be a base model or a
fine tune.
""")
  "model"?: string;

  @doc("""
The scale settings of a deployment. It defines the modes for scaling and the
reserved capacity.
""")
  scale_settings?: ScaleSettingsUpdate;
}

@doc("""
The scale settings of a deployment. It defines the modes for scaling and the
reserved capacity.
""")
@discriminator("scale_type")
model ScaleSettingsUpdate {}

@doc("Represents a list of files.")
model FileList {
  @doc("Defines the type of an object.")
  @visibility("read")
  object?: TypeDiscriminator;

  @doc("The list of items.")
  @visibility("read")
  data?: File[];
}

@doc("""
A file is a document usable for training and validation. It can also be a
service generated document with result details.
""")
@resource("files")
model File {
  @doc("Defines the type of an object.")
  @visibility("read")
  object?: TypeDiscriminator;

  @doc("The state of a job or item.")
  @visibility("read")
  status?: State;

  @doc("A timestamp when this job or item was created (in unix epochs).")
  @visibility("read")
  created_at?: int32;

  @doc("A timestamp when this job or item was modified last (in unix epochs).")
  @visibility("read")
  updated_at?: int32;

  @doc("The identity of this item.")
  @visibility("read")
  @key("fileId")
  id: string;

  @doc("""
The size of this file when available (can be null). File sizes larger than
2^53-1 are not supported to ensure compatibility
with JavaScript integers.
""")
  @visibility("read")
  bytes?: int32;

  @doc("""
The intended purpose of the uploaded documents. Use \"fine-tune\" for
fine-tuning. This allows us to validate the format of the uploaded file.
""")
  purpose: Purpose;

  @doc("The name of the file.")
  filename: string;
}

@doc("""
Defines a document to import from an external content url to be usable with
Azure OpenAI.
""")
model FileImport {
  @doc("""
The intended purpose of the uploaded documents. Use \"fine-tune\" for
fine-tuning. This allows us to validate the format of the uploaded file.
""")
  purpose: Purpose;

  @doc("""
The name of the [JSON Lines](https://jsonlines.readthedocs.io/en/latest/) file
to be uploaded.
If the `purpose` is set to \"fine-tune\", each line is a JSON
record with \"prompt\" and \"completion\" fields representing your training
examples.
""")
  filename: string;

  @doc("""
The url to download the document from (can be SAS url of a blob or any other
external url accessible with a GET request).
""")
  content_url: string;
}

@doc("Represents a list of fine tunes.")
model FineTuneList {
  @doc("Defines the type of an object.")
  @visibility("read")
  object?: TypeDiscriminator;

  @doc("The list of items.")
  @visibility("read")
  data?: FineTune[];
}

@doc("Fine tuning is a job to tailor a model to specific training data.")
@resource("fine-tunes")
model FineTune {
  @doc("Defines the type of an object.")
  @visibility("read")
  object?: TypeDiscriminator;

  @doc("The state of a job or item.")
  @visibility("read")
  status?: State;

  @doc("A timestamp when this job or item was created (in unix epochs).")
  @visibility("read")
  created_at?: int32;

  @doc("A timestamp when this job or item was modified last (in unix epochs).")
  @visibility("read")
  updated_at?: int32;

  @doc("The identity of this item.")
  @visibility("read")
  @key
  id: string;

  @doc("The identifier of the base model used for the fine-tune.")
  "model": string;

  @doc("""
The identifier of the resulting fine tuned model. This property is only
populated for successfully completed fine-tune runs.
Use this identifier to
create a deployment for inferencing.
""")
  @visibility("read")
  fine_tuned_model?: string;

  @doc("The files that are used for training the fine tuned model.")
  training_files: File[];

  @doc("The files that are used to evaluate the fine tuned model during training.")
  validation_files?: File[];

  @doc("""
The result files containing training and evaluation metrics in csv format.
The
file is only available for successfully completed fine-tune runs.
""")
  @visibility("read")
  result_files?: File[];

  @doc("""
The events that show the progress of the fine-tune run including queued,
running and completed.
""")
  @visibility("read")
  events?: Event[];

  @doc("""
The organisation id of this fine tune job. Unused on Azure OpenAI;
compatibility for OpenAI only.
""")
  @visibility("read")
  organisation_id?: string;

  @doc("""
The user id of this fine tune job. Unused on Azure OpenAI; compatibility for
OpenAI only.
""")
  @visibility("read")
  user_id?: string;

  @doc("The hyper parameter settings used in a fine tune job.")
  hyperparams?: HyperParameters;
}

@doc("Event")
model Event {
  @doc("Defines the type of an object.")
  @visibility("read")
  object?: TypeDiscriminator;

  @doc("A timestamp when this event was created (in unix epochs).")
  @visibility("read")
  created_at?: int32;

  @doc("The verbosity level of an event.")
  @visibility("read")
  level?: LogLevel;

  @doc("""
The message describing the event. This can be a change of state, e.g.,
enqueued, started, failed or completed, or other events like uploaded results.
""")
  @visibility("read")
  message?: string;
}

@doc("The hyper parameter settings used in a fine tune job.")
model HyperParameters {
  @doc("""
The batch size to use for training. The batch size is the number of training
examples used to train a single forward and backward pass.
In general, we've
found that larger batch sizes tend to work better for larger datasets.
The
default value as well as the maximum value for this property are specific to a
base model.
""")
  batch_size?: int32;

  @doc("""
The learning rate multiplier to use for training. The fine-tuning learning rate
is the original learning rate used for pre-training multiplied by this
value.
Larger learning rates tend to perform better with larger batch
sizes.
We recommend experimenting with values in the range 0.02 to 0.2 to see
what produces the best results.
""")
  learning_rate_multiplier?: float32;

  @doc("""
The number of epochs to train the model for. An epoch refers to one full cycle
through the training dataset.
""")
  n_epochs?: int32;

  @doc("""
The weight to use for loss on the prompt tokens. This controls how much the
model tries to learn to generate the prompt
(as compared to the completion
which always has a weight of 1.0), and can add a stabilizing effect to training
when completions are short.
If prompts are extremely long (relative to
completions), it may make sense to reduce this weight so as to avoid
over-prioritizing learning the prompt.
""")
  prompt_loss_weight?: float32;

  @doc("""
A value indicating whether to compute classification metrics.
If set, we
calculate classification-specific metrics such as accuracy and F-1 score using
the validation set at the end of every epoch.
These metrics can be viewed in
the results file. In order to compute classification metrics, you must provide
a validation_file.Additionally,
you must specify classification_n_classes for
multiclass classification or classification_positive_class for binary
classification.
""")
  compute_classification_metrics?: boolean;

  @doc("""
The number of classes in a classification task.
This parameter is required for
multiclass classification.
""")
  classification_n_classes?: int32;

  @doc("""
The positive class in binary classification.
This parameter is needed to
generate precision, recall, and F1 metrics when doing binary classification.
""")
  classification_positive_class?: string;

  @doc("""
The classification beta values. If this is provided, we calculate F-beta scores
at the specified beta values.
The F-beta score is a generalization of F-1
score. This is only used for binary classification.
With a beta of 1 (i.e.the
F-1 score), precision and recall are given the same weight.
A larger beta
score puts more weight on recall and less on precision. A smaller beta score
puts more weight on precision and less on recall.
""")
  classification_betas?: float32[];
}

@doc("Defines the values of a fine tune job.")
model FineTuneCreation {
  @doc("The identifier of the base model used for this fine-tune.")
  "model": string;

  @doc("The file that is used for training this fine tuned model.")
  training_file: string;

  @doc("The file that is used to evaluate the fine tuned model during training.")
  validation_file?: string;

  @doc("The hyper parameter settings used in a fine tune job.")
  hyperparams?: HyperParameters;
}

@doc("Represents a list of events.")
model EventList {
  @doc("Defines the type of an object.")
  @visibility("read")
  object?: TypeDiscriminator;

  @doc("The list of items.")
  @visibility("read")
  data?: Event[];
}

@doc("Represents a list of models.")
model ModelList {
  @doc("Defines the type of an object.")
  @visibility("read")
  object?: TypeDiscriminator;

  @doc("The list of items.")
  @visibility("read")
  data?: Model[];
}

@doc("A model is either a base model or the result of a successful fine tune job.")
@resource("models")
model Model {
  @doc("Defines the type of an object.")
  @visibility("read")
  object?: TypeDiscriminator;

  @doc("The state of a job or item.")
  @visibility("read")
  status?: State;

  @doc("A timestamp when this job or item was created (in unix epochs).")
  @visibility("read")
  created_at?: int32;

  @doc("A timestamp when this job or item was modified last (in unix epochs).")
  @visibility("read")
  updated_at?: int32;

  @doc("The identity of this item.")
  @visibility("read")
  @key("modelId")
  id: string;

  @doc("The base model ID if this is a fine tune model; otherwise `null`.")
  @visibility("read")
  "model"?: string;

  @doc("The fine tune job ID if this is a fine tune model; otherwise `null`.")
  @visibility("read")
  fine_tune?: string;

  @doc("The capabilities of a base or fine tune model.")
  capabilities?: Capabilities;

  @doc("""
Defines the dates of deprecation for the different use cases of a
model.
Usually base models support 1 year of fine tuning after creation.
Inference is typically supported 2 years after creation of base or
fine tuned
models. The exact dates are specified in the properties.
""")
  deprecation?: Deprecation;
}

@doc("The capabilities of a base or fine tune model.")
model Capabilities {
  @doc("A value indicating whether a model can be used for fine tuning.")
  @visibility("read")
  fine_tune?: boolean;

  @doc("A value indicating whether a model can be deployed.")
  @visibility("read")
  inference?: boolean;

  @doc("A value indicating whether a model supports completion.")
  @visibility("read")
  completion?: boolean;

  @doc("A value indicating whether a model supports embeddings.")
  @visibility("read")
  embeddings?: boolean;

  @doc("The supported scale types for deployments of this model.")
  @visibility("read")
  scale_types?: ScaleType[];
}

@doc("""
Defines the dates of deprecation for the different use cases of a
model.
Usually base models support 1 year of fine tuning after creation.
Inference is typically supported 2 years after creation of base or
fine tuned
models. The exact dates are specified in the properties.
""")
model Deprecation {
  @doc("""
The end date of fine tune support of this model. Will be `null` for fine tune
models.
""")
  @visibility("read")
  fine_tune?: int32;

  @doc("The end date of inference support of this model.")
  @visibility("read")
  inference?: int32;
}

@doc("Settings for the manual scale type.")
model ManualScaleSettings extends ScaleSettings {
  @doc("The constant reserved capacity of the inference endpoint for this deployment.")
  capacity: int32;

  @doc("Defines how scaling operations will be executed.")
  scale_type: "manual";
}

@doc("Settings for the manual scale type.")
model ManualScaleSettingsUpdate extends ScaleSettingsUpdate {
  @doc("The constant reserved capacity of the inference endpoint for this deployment.")
  capacity?: int32;

  @doc("Defines how scaling operations will be executed.")
  scale_type: "manual";
}

@doc("Settings for the standard scale type.")
model StandardScaleSettings extends ScaleSettings {
  @doc("Defines how scaling operations will be executed.")
  scale_type: "standard";
}

@doc("content of uploaded file")
model FileContent {
  @doc("""
The intended purpose of the uploaded documents. Use \"fine-tune\" for
fine-tuning. This allows us to validate the format of the uploaded file.
""")
  purpose: Purpose;

  @doc("Gets or sets the file to upload into Azure OpenAI.")
  file: bytes;
}

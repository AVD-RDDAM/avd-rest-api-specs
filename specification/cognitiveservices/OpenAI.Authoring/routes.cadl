import "@azure-tools/cadl-azure-core";
import "@cadl-lang/rest";
import "./models.cadl";

using Cadl.Rest;
using Cadl.Http;

namespace AzureOpenAIAPIversion20220601preview;

interface DeploymentsOperations {
  @summary("Gets the list of deployments owned by the Azure OpenAI resource.")
  @doc("Gets the list of deployments owned by the Azure OpenAI resource.")
  @route("/deployments")
  @get
  List is Azure.Core.Foundations.Operation<{}, DeploymentList>;

  @summary("""
Creates a new deployment for the Azure OpenAI resource according to the given
specification.
""")
  @doc("""
Creates a new deployment for the Azure OpenAI resource according to the given
specification.
""")
  @route("/deployments")
  @post
  Create is Azure.Core.Foundations.Operation<
    {
      @doc("""
The specification of the deployment including the model to deploy and the scale
settings.
""")
      @body
      body: Deployment;
    },
    Deployment
  >;

  @summary("Gets details for a single deployment specified by the given deployment_id.")
  @doc("Gets details for a single deployment specified by the given deployment_id.")
  @route("/deployments/{deployment_id}")
  @get
  Get is Azure.Core.Foundations.Operation<
    {
      @doc("The identifier of the deployment.")
      @path
      deployment_id: string;
    },
    Deployment
  >;

  @summary("Updates the mutable details of the deployment with the given deployment_id.")
  @doc("Updates the mutable details of the deployment with the given deployment_id.")
  @route("/deployments/{deployment_id}")
  @patch
  Update is Azure.Core.Foundations.Operation<
    {
      @doc("The identifier of the deployment.")
      @path
      deployment_id: string;

      @doc("The updated values for the deployment.")
      @body
      body: DeploymentUpdate;
    },
    Deployment
  >;

  @summary("Deletes the deployment specified by the given deployment_id.")
  @doc("Deletes the deployment specified by the given deployment_id.")
  @route("/deployments/{deployment_id}")
  @delete
  Delete is Azure.Core.Foundations.Operation<
    {
      @doc("The identifier of the deployment.")
      @path
      deployment_id: string;
    },
    void
  >;
}

interface FilesOperations {
  @summary("""
Gets a list of all files owned by the Azure OpenAI resource.
These include
user uploaded content like files with purpose "fine-tune" for training or
validation of fine-tunes models
as well as files that are generated by the
service such as "fine-tune-results" which contains various metrics for the
corresponding fine-tune job.
""")
  @doc("""
Gets a list of all files owned by the Azure OpenAI resource.
These include
user uploaded content like files with purpose \"fine-tune\" for training or
validation of fine-tunes models
as well as files that are generated by the
service such as \"fine-tune-results\" which contains various metrics for the
corresponding fine-tune job.
""")
  @route("/files")
  @get
  List is Azure.Core.Foundations.Operation<{}, FileList>;

  @summary("""
Creates a new file entity by uploading data from a local machine. Uploaded
files can, for example, be used for training or evaluating fine-tuned models.
""")
  @doc("""
Creates a new file entity by uploading data from a local machine. Uploaded
files can, for example, be used for training or evaluating fine-tuned models.
""")
  Upload is Azure.Core.ResourceCreateWithServiceProvidedName<File>;

  @summary("""
Gets details for a single file specified by the given file_id including status,
size, purpose, etc.
""")
  @doc("""
Gets details for a single file specified by the given file_id including status,
size, purpose, etc.
""")
  Get is Azure.Core.ResourceRead<File>;

  @summary("""
Deletes the file with the given file_id.
Deletion is also allowed if a file
was used, e.g., as training file in a fine-tune job.
""")
  @doc("""
Deletes the file with the given file_id.
Deletion is also allowed if a file
was used, e.g., as training file in a fine-tune job.
""")
  Delete is Azure.Core.ResourceDelete<File>;

  @summary("""
Gets the content of the file specified by the given file_id.
Files can be user
uploaded content or generated by the service like result metrics of a fine-tune
job.
""")
  @doc("""
Gets the content of the file specified by the given file_id.
Files can be user
uploaded content or generated by the service like result metrics of a fine-tune
job.
""")
  @route("/files/{file_id}/content")
  @get
  GetFileContent is Azure.Core.Foundations.Operation<
    {
      @doc("The identifier of the file.")
      @path
      file_id: string;

      @doc("Accept header")
      @header
      Accept: "application/octet-stream, application/json";
    },
    void
  >;

  @summary("""
Creates a new file entity by importing data from a provided url. Uploaded files
can, for example, be used for training or evaluating fine-tuned models.
""")
  @doc("""
Creates a new file entity by importing data from a provided url. Uploaded files
can, for example, be used for training or evaluating fine-tuned models.
""")
  Import is Azure.Core.ResourceCreateWithServiceProvidedName<File>;
}

interface FineTunesOperations {
  @summary("""
Gets a list of all fine-tune jobs owned by the Azure OpenAI resource.
The
details that are returned for each fine-tune job contain besides its
identifier
the base model, training and validation files, hyper parameters,
time stamps, status and events.
Events are created when the job status
changes, e.g. running or complete, and when results are uploaded.
""")
  @doc("""
Gets a list of all fine-tune jobs owned by the Azure OpenAI resource.
The
details that are returned for each fine-tune job contain besides its
identifier
the base model, training and validation files, hyper parameters,
time stamps, status and events.
Events are created when the job status
changes, e.g. running or complete, and when results are uploaded.
""")
  @route("/fine-tunes")
  @get
  List is Azure.Core.Foundations.Operation<{}, FineTuneList>;

  @summary("""
Creates a job that fine-tunes a specified model from a given training
file.
Response includes details of the enqueued job including job status and
hyper parameters.
The name of the fine-tuned model is added to the response
once complete.
""")
  @doc("""
Creates a job that fine-tunes a specified model from a given training
file.
Response includes details of the enqueued job including job status and
hyper parameters.
The name of the fine-tuned model is added to the response
once complete.
""")
  @route("/fine-tunes")
  @post
  Create is Azure.Core.Foundations.Operation<
    {
      @doc("""
The specification of the fine-tuned model to create.
Required parameters are
the base model and the training file to use.
Optionally a validation file can
be specified to compute validation metrics during training.
Hyper parameters
will be set to default values or can by optionally specified.
These include
batch size, learning rate multiplier, number of epochs and others.
""")
      @body
      body: FineTuneCreation;
    },
    FineTune
  >;

  @summary("""
Gets details for a single fine-tune job specified by the given
fine_tune_id.
The details contain the base model, training and validation
files, hyper parameters, time stamps, status and events.
Events are created
when the job status changes, e.g. running or complete, and when results are
uploaded.
""")
  @doc("""
Gets details for a single fine-tune job specified by the given
fine_tune_id.
The details contain the base model, training and validation
files, hyper parameters, time stamps, status and events.
Events are created
when the job status changes, e.g. running or complete, and when results are
uploaded.
""")
  @route("/fine-tunes/{fine_tune_id}")
  @get
  Get is Azure.Core.Foundations.Operation<
    {
      @doc("The identifier of the fine-tune job.")
      @path
      fine_tune_id: string;
    },
    FineTune
  >;

  @summary("Deletes the fine-tune job specified by the given fine_tune_id.")
  @doc("Deletes the fine-tune job specified by the given fine_tune_id.")
  @route("/fine-tunes/{fine_tune_id}")
  @delete
  Delete is Azure.Core.Foundations.Operation<
    {
      @doc("The identifier of the fine-tune job.")
      @path
      fine_tune_id: string;
    },
    void
  >;

  @summary("""
Gets the events for the fine-tune job specified by the given
fine_tune_id.
Events are created when the job status changes, e.g. running or
complete, and when results are uploaded.
""")
  @doc("""
Gets the events for the fine-tune job specified by the given
fine_tune_id.
Events are created when the job status changes, e.g. running or
complete, and when results are uploaded.
""")
  @route("/fine-tunes/{fine_tune_id}/events")
  @get
  GetEvents is Azure.Core.Foundations.Operation<
    {
      @doc("The identifier of the fine-tune job.")
      @path
      fine_tune_id: string;

      @doc("""
A flag indicating whether to stream events for the fine-tune job. If set to
true,
            events will be sent as data-only server-sent events as they
become available. The stream will terminate with
            a data: [DONE]
message when the job is finished (succeeded, cancelled, or failed).
          
 If set to false, only events generated so far will be returned..
""")
      @query
      stream: boolean;
    },
    EventList
  >;

  @summary("Cancels the processing of the fine-tune job specified by the given fine_tune_id.")
  @doc("Cancels the processing of the fine-tune job specified by the given fine_tune_id.")
  @route("/fine-tunes/{fine_tune_id}/cancel")
  @post
  Cancel is Azure.Core.Foundations.Operation<
    {
      @doc("The identifier of the fine-tune job.")
      @path
      fine_tune_id: string;
    },
    FineTune
  >;
}

interface ModelsOperations {
  @summary("""
Gets a list of all models that are accessible by the Azure OpenAI
resource.
These include base models as well as all successfully completed
fine-tuned models owned by the Azure OpenAI resource.
""")
  @doc("""
Gets a list of all models that are accessible by the Azure OpenAI
resource.
These include base models as well as all successfully completed
fine-tuned models owned by the Azure OpenAI resource.
""")
  @route("/models")
  @get
  List is Azure.Core.Foundations.Operation<{}, ModelList>;

  @summary("Gets details for the model specified by the given modelId.")
  @doc("Gets details for the model specified by the given modelId.")
  @route("/models/{model_id}")
  @get
  Get is Azure.Core.Foundations.Operation<
    {
      @doc("The identifier of the model.")
      @path
      model_id: string;
    },
    Model
  >;
}

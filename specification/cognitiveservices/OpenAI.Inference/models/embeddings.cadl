import "@cadl-lang/rest";

using Cadl.Rest;
using Cadl.Http;

namespace Azure.OpenAI.Request {

    @doc("Input model for embeddings create endpoint")
    model EmbeddingsOperationInput {
        @doc("deployment id of the model which was deployed")
        @path
        "deploymentId": string;
        @doc("expected schema for the body of the embedding post request")
        @body
        body: Request.EmbeddingsCreateBaseBody;
    }

    @doc("Embedding request body schema, base fields")
    model EmbeddingsCreateBaseBody {
        @doc("The ID of the end-user, for use in tracking and rate-limiting.")
        user?: string;

        @doc("input type of embedding search to use")
        input_type?: string;

        @doc("ID of the model to use")
        "model"?: string;
    }

    @doc("Embedding request body schema")
    model EmbeddingsCreateBody {
        ... EmbeddingsCreateBaseBody;
        @doc("""
        An input to embed, encoded as a string, a list of strings, or a list of token
        lists
        """)
        input: object;
        // https://stackoverflow.com/questions/70112647/equivalent-use-of-oneof-from-openapi-3-in-openapi-2
        // we technically have string, string[], integer[], and integer[][]
        // but since we are targeting openAPIv2 we are not able to use polymorphism effectively, we need to simply
        // have a typeless object as part of the response
    }

};

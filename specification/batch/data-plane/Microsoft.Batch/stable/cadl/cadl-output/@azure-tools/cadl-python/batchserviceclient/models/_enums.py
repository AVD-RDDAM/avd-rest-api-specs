# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum
from azure.core import CaseInsensitiveEnumMeta


class AccessScope(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """AccessScope."""

    JOB = "job"


class AllocationState(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """AllocationState."""

    STEADY = "steady"
    RESIZING = "resizing"
    STOPPING = "stopping"


class AutoUserScope(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """AutoUserScope."""

    TASK = "task"
    POOL = "pool"


class CachingType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """CachingType."""

    NONE = "none"
    READ_ONLY = "readonly"
    READ_WRITE = "readwrite"


class CertificateFormat(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """CertificateFormat."""

    PFX = "pfx"
    CER = "cer"


class CertificateState(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """CertificateState."""

    ACTIVE = "active"
    DELETING = "deleting"
    DELETE_FAILED = "deletefailed"


class CertificateStoreLocation(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """CertificateStoreLocation."""

    CURRENT_USER = "currentuser"
    LOCAL_MACHINE = "localmachine"


class CertificateVisibility(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """CertificateVisibility."""

    START_TASK = "starttask"
    TASK = "task"
    REMOTE_USER = "remoteuser"


class ComputeNodeDeallocationOption(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """ComputeNodeDeallocationOption."""

    REQUEUE = "requeue"
    TERMINATE = "terminate"
    TASK_COMPLETION = "taskcompletion"
    RETAINED_DATA = "retaineddata"


class ComputeNodeFillType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """ComputeNodeFillType."""

    SPREAD = "spread"
    PACK = "pack"


class ComputeNodeRebootOption(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """ComputeNodeRebootOption."""

    REQUEUE = "requeue"
    TERMINATE = "terminate"
    TASK_COMPLETION = "taskcompletion"
    RETAINED_DATA = "retaineddata"


class ComputeNodeReimageOption(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """ComputeNodeReimageOption."""

    REQUEUE = "requeue"
    TERMINATE = "terminate"
    TASK_COMPLETION = "taskcompletion"
    RETAINED_DATA = "retaineddata"


class ComputeNodeState(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """ComputeNodeState."""

    IDLE = "idle"
    REBOOTING = "rebooting"
    REIMAGING = "reimaging"
    RUNNING = "running"
    UNUSABLE = "unusable"
    CREATING = "creating"
    STARTING = "starting"
    WAITING_FOR_START_TASK = "waitingforstarttask"
    START_TASK_FAILED = "starttaskfailed"
    UNKNOWN = "unknown"
    LEAVING_POOL = "leavingpool"
    OFFLINE = "offline"
    PREEMPTED = "preempted"


class ContainerType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """ContainerType."""

    DOCKER_COMPATIBLE = "dockerCompatible"


class ContainerWorkingDirectory(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """ContainerWorkingDirectory."""

    TASK_WORKING_DIRECTORY = "taskWorkingDirectory"
    CONTAINER_IMAGE_DEFAULT = "containerImageDefault"


class DependencyAction(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """DependencyAction."""

    SATISFY = "satisfy"
    BLOCK = "block"


class DiffDiskPlacement(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """DiffDiskPlacement."""

    CACHE_DISK = "cachedisk"


class DisableComputeNodeSchedulingOption(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """DisableComputeNodeSchedulingOption."""

    REQUEUE = "requeue"
    TERMINATE = "terminate"
    TASK_COMPLETION = "taskcompletion"


class DisableJobOption(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """DisableJobOption."""

    REQUEUE = "requeue"
    TERMINATE = "terminate"
    WAIT = "wait"


class DiskEncryptionTarget(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """DiskEncryptionTarget."""

    OS_DISK = "osdisk"
    TEMPORARY_DISK = "temporarydisk"


class DynamicVNetAssignmentScope(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """DynamicVNetAssignmentScope."""

    NONE = "none"
    JOB = "job"


class ElevationLevel(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """ElevationLevel."""

    NON_ADMIN = "nonadmin"
    ADMIN = "admin"


class ErrorCategory(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """ErrorCategory."""

    USER_ERROR = "usererror"
    SERVER_ERROR = "servererror"


class InboundEndpointProtocol(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """InboundEndpointProtocol."""

    TCP = "tcp"
    UDP = "udp"


class IPAddressProvisioningType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """IPAddressProvisioningType."""

    BATCH_MANAGED = "batchmanaged"
    USER_MANAGED = "usermanaged"
    NO_PUBLIC_I_P_ADDRESSES = "nopublicipaddresses"


class JobAction(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """JobAction."""

    NONE = "none"
    DISABLE = "disable"
    TERMINATE = "terminate"


class JobPreparationTaskState(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """JobPreparationTaskState."""

    RUNNING = "running"
    COMPLETED = "completed"


class JobReleaseTaskState(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """JobReleaseTaskState."""

    RUNNING = "running"
    COMPLETED = "completed"


class JobScheduleState(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """JobScheduleState."""

    ACTIVE = "active"
    COMPLETED = "completed"
    DISABLED = "disabled"
    TERMINATING = "terminating"
    DELETING = "deleting"


class JobState(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """JobState."""

    ACTIVE = "active"
    DISABLING = "disabling"
    DISABLED = "disabled"
    ENABLING = "enabling"
    TERMINATING = "terminating"
    COMPLETED = "completed"
    DELETING = "deleting"


class LoginMode(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """LoginMode."""

    BATCH = "batch"
    INTERACTIVE = "interactive"


class NetworkSecurityGroupRuleAccess(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """NetworkSecurityGroupRuleAccess."""

    ALLOW = "allow"
    DENY = "deny"


class NodeCommunicationMode(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """NodeCommunicationMode."""

    DEFAULT = "default"
    CLASSIC = "classic"
    SIMPLIFIED = "simplified"


class NodePlacementPolicyType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """NodePlacementPolicyType."""

    REGIONAL = "regional"
    ZONAL = "zonal"


class OnAllTasksComplete(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """OnAllTasksComplete."""

    NO_ACTION = "noaction"
    TERMINATE_JOB = "terminatejob"


class OnTaskFailure(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """OnTaskFailure."""

    NO_ACTION = "noaction"
    PERFORM_EXIT_OPTIONS_JOB_ACTION = "performexitoptionsjobaction"


class OSType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """OSType."""

    LINUX = "linux"
    WINDOWS = "windows"


class OutputFileUploadCondition(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """OutputFileUploadCondition."""

    TASK_SUCCESS = "tasksuccess"
    TASK_FAILURE = "taskfailure"
    TASK_COMPLETION = "taskcompletion"


class PoolIdentityType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """PoolIdentityType."""

    USER_ASSIGNED = "UserAssigned"
    NONE = "None"


class PoolLifetimeOption(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """PoolLifetimeOption."""

    JOB_SCHEDULE = "jobschedule"
    JOB = "job"


class PoolState(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """PoolState."""

    ACTIVE = "active"
    DELETING = "deleting"


class SchedulingState(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """SchedulingState."""

    ENABLED = "enabled"
    DISABLED = "disabled"


class StartTaskState(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """StartTaskState."""

    RUNNING = "running"
    COMPLETED = "completed"


class StatusLevelTypes(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """StatusLevelTypes."""

    ERROR = "Error"
    INFO = "Info"
    WARNING = "Warning"


class StorageAccountType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """StorageAccountType."""

    STANDARD_L_R_S = "standard_lrs"
    PREMIUM_L_R_S = "premium_lrs"


class SubtaskState(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """SubtaskState."""

    PREPARING = "preparing"
    RUNNING = "running"
    COMPLETED = "completed"


class TaskAddStatus(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """TaskAddStatus."""

    SUCCESS = "success"
    CLIENT_ERROR = "clienterror"
    SERVER_ERROR = "servererror"


class TaskExecutionResult(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """TaskExecutionResult."""

    SUCCESS = "success"
    FAILURE = "failure"


class TaskState(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """TaskState."""

    ACTIVE = "active"
    PREPARING = "preparing"
    RUNNING = "running"
    COMPLETED = "completed"


class VerificationType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """VerificationType."""

    VERIFIED = "verified"
    UNVERIFIED = "unverified"

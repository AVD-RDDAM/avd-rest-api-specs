using Cadl.Http;
using Cadl.Rest;
using OpenAPI;
using Autorest;
using Azure.ResourceManager.Foundations;

namespace Azure.ResourceManager;

// OPERATION TEMPLATES
@autoRoute
@doc("List {name} resources by subscription ID", TResource)
@list(TResource)
@segmentOf(TResource)
@armResourceList(TResource)
@get
op ArmListBySubscriptionNoError<TResource extends ArmResource>(
  ...SubscriptionScope<TResource>
): ArmResponse<ResourceListResult<TResource>> ;

@get
@autoRoute
@list(TResource)
@segmentOf(TResource)
@armRenameListByOperation(TResource, TParentName, TParentFriendlyName) // This must come before @armResourceList!
@armResourceList(TResource)
op ArmResourceListByParentNoError<
  TResource extends ArmResource,
  TBaseParameters = BaseParameters<TResource>,
  TParentName = "",
  TParentFriendlyName = ""
>(
  ...ResourceParentParameters<TResource, TBaseParameters>
): ArmResponse<ResourceListResult<TResource>> ;

@get
@autoRoute
@list(TResource)
@segmentOf(TResource)
@armRenameListByOperation(TResource) // This must come before @armResourceList!
@armResourceList(TResource)
op ArmResourceListAtScopeNoError<
  TResource extends ArmResource,
  TBaseParameters = BaseParameters<TResource>
>(
  ...ResourceParentParameters<TResource, TBaseParameters>
): ArmResponse<ResourceListResult<TResource>> ;

@autoRoute
@doc("Get a {name}", TResource)
@get
@armResourceRead(TResource)
op ArmResourceReadNoError<TResource extends ArmResource, TBaseParameters = BaseParameters<TResource>>(
  ...ResourceInstanceParametersCustom<TResource, TBaseParameters>
): ArmResponse<TResource> ;

@autoRoute
@doc("Create a {name}", TResource)
@extension("x-ms-long-running-operation", true)
@extension(
  "x-ms-long-running-operation-options",
  {
    "final-state-via": "azure-async-operation",
  }
)
@armResourceCreateOrUpdate(TResource)
@put
op ArmResourceCreateOrUpdateAsyncNoError<
  TResource extends ArmResource,
  TBaseParameters = BaseParameters<TResource>
>(
  ...ResourceInstanceParametersCustom<TResource, TBaseParameters>,

  @doc("Resource create parameters.")
  @body
  resource: TResource
): ArmAcceptedResponse<"Accepted."> ;

@autoRoute
@doc("Create a {name}", TResource)
@armResourceCreateOrUpdate(TResource)
@put
op ArmResourceCreateOrUpdateSyncNoError<
  TResource extends ArmResource,
  TBaseParameters = BaseParameters<TResource>
>(
  ...ResourceInstanceParametersCustom<TResource, TBaseParameters>,

  @doc("Resource create parameters.")
  @body
  resource: TResource
): ArmResponse<TResource> ;

alias ArmTagsPatchAsyncNoError<
  TResource extends ArmResource,
  TProperties extends object,
  TBaseParameters = BaseParameters<TResource>
> = ArmCustomPatchAsyncNoError<TResource, TagsUpdateModel<TResource>, TBaseParameters>;

alias ArmResourcePatchAsyncNoError<
  TResource extends ArmResource,
  TProperties extends object,
  TBaseParameters = BaseParameters<TResource>
> = ArmCustomPatchAsyncNoError<TResource, ResourceUpdateModel<TResource, TProperties>, TBaseParameters>;

@autoRoute
@doc("Update a {name}", TResource)
@extension("x-ms-long-running-operation", true)
@extension(
  "x-ms-long-running-operation-options",
  {
    "final-state-via": "azure-async-operation",
  }
)
@armResourceUpdate(TResource)
@patch
op ArmCustomPatchAsyncNoError<
  TResource extends ArmResource,
  TPatchModel extends object = TagsUpdateModel<TResource>,
  TBaseParameters = BaseParameters<TResource>
>(
  ...ResourceInstanceParametersCustom<TResource, TBaseParameters>,

  @doc("The resource properties to be updated.")
  @body
  properties: TPatchModel
): ArmResponse<TResource> | ArmAcceptedResponse<"Resource update request accepted."> ;

alias ArmTagsPatchSyncNoError<
  TResource extends ArmResource,
  TBaseParameters = BaseParameters<TResource>
> = ArmCustomPatchSync<TResource, TagsUpdateModel<TResource>, TBaseParameters>;

alias ArmResourcePatchSyncNoError<
  TResource extends ArmResource,
  TProperties extends object,
  TBaseParameters = BaseParameters<TResource>
> = ArmCustomPatchSyncNoError<TResource, ResourceUpdateModel<TResource, TProperties>, TBaseParameters>;

@autoRoute
@doc("Update a {name}", TResource)
@armResourceUpdate(TResource)
@patch
op ArmCustomPatchSyncNoError<
  TResource extends ArmResource,
  TPatchModel extends object = TagsUpdateModel<TResource>,
  TBaseParameters = BaseParameters<TResource>
>(
  ...ResourceInstanceParametersCustom<TResource, TBaseParameters>,

  @doc("The resource properties to be updated.")
  @body
  properties: TPatchModel
): ArmResponse<TResource> ;

@autoRoute
@doc("Delete a {name}", TResource)
@extension("x-ms-long-running-operation", true)
@extension(
  "x-ms-long-running-operation-options",
  {
    "final-state-via": "azure-async-operation",
  }
)
@armResourceDelete(TResource)
@delete
op ArmResourceDeleteAsyncNoError<
  TResource extends ArmResource,
  TBaseParameters = BaseParameters<TResource>
>(...ResourceInstanceParametersCustom<TResource, TBaseParameters>):
  | ArmDeletedResponse
  | ArmDeleteAcceptedResponse
  | ArmDeletedNoContentResponse
  ;

@autoRoute
@doc("Delete a {name}", TResource)
@armResourceDelete(TResource)
@delete
op ArmResourceDeleteSyncNoError<
  TResource extends ArmResource,
  TBaseParameters = BaseParameters<TResource>
>(
  ...ResourceInstanceParametersCustom<TResource, TBaseParameters>
): ArmDeletedResponse | ArmDeletedNoContentResponse ;

@autoRoute
@extension("x-ms-long-running-operation", true)
@extension(
  "x-ms-long-running-operation-options",
  {
    "final-state-via": "azure-async-operation",
  }
)
@armResourceAction(TResource)
@post
op ArmResourceActionAsyncNoError<
  TResource extends ArmResource,
  TRequest extends object,
  TResponse extends object,
  TBaseParameters = BaseParameters<TResource>
>(
  ...ResourceInstanceParametersCustom<TResource, TBaseParameters>,

  @doc("The content of the action request")
  @body
  body: TRequest
): ArmResponse<TResponse> | ArmAcceptedResponse ;

@autoRoute
@armResourceAction(TResource)
@post
op ArmResourceActionSyncNoError<
  TResource extends ArmResource,
  TRequest extends object,
  TResponse extends object,
  TBaseParameters = BaseParameters<TResource>
>(
  ...ResourceInstanceParametersCustom<TResource, TBaseParameters>,

  @doc("The content of the action request")
  @body
  body: TRequest
): ArmResponse<TResponse> ;

@autoRoute
@extension("x-ms-long-running-operation", true)
@extension(
  "x-ms-long-running-operation-options",
  {
    "final-state-via": "azure-async-operation",
  }
)
@armResourceAction(TResource)
@post
op ArmResourceActionNoContentAsyncNoError<
  TResource extends ArmResource,
  TRequest extends object,
  TBaseParameters = BaseParameters<TResource>
>(
  ...ResourceInstanceParametersCustom<TResource, TBaseParameters>,

  @doc("The content of the action request")
  @body
  body: TRequest
): ArmNoContentResponse<"Action completed successfully."> | ArmAcceptedResponse ;

@autoRoute
@armResourceAction(TResource)
@post
op ArmResourceActionNoContentSyncNoError<
  TResource extends ArmResource,
  TRequest extends object,
  TBaseParameters = BaseParameters<TResource>
>(
  ...ResourceInstanceParametersCustom<TResource, TBaseParameters>,

  @doc("The content of the action request")
  @body
  body: TRequest
): ArmNoContentResponse<"Action completed successfully."> ;

/**
 * The dynamic parameters of a resource instance - pass in the proper base type to indicate
 * where the resource is based.  The default is in a resource group
 */
model ResourceInstanceParametersCustom<
  TResource extends ArmResource,
  TBaseParameters = BaseParameters<TResource>
> {
  ...TBaseParameters;
  ...ProviderNamespace<TResource>;
  ...KeysOf<TResource>;
}
@doc("Gets or sets the network adapters of the server.")
model NetworkAdapters {
  @doc(" Gets or sets the NIC Id.")
  nicId: string;

  @doc(" Gets or sets the MAC address of the machine.")
  macAddress: string;

  @doc("Gets the IP addresses of the machine")
  ipAddressList: string[];

  @doc(" Gets or sets the virtual network name")
  networkName: string;

  @doc("Gets or sets the type of the IP address.")
  ipAddressType: string;
}

@doc("Gets or sets the disk details of server.")
model Disks {
  @doc(" Gets or sets Id of the disk.")
  id: string;

  @doc("Gets or sets generated Id of the disk.")
  generatedId: string;

  @doc("Gets or sets Bytes allocated for the disk.")
  maxSizeInBytes: int64;

  @doc("Gets or sets Name of the disk.")
  name: string;

  @doc("Gets or sets Type of the disk.")
  diskType: string;

  @doc("Gets or sets LUN of the disk.")
  lun: int64;

  @doc("Gets or sets Path of the disk.")
  path: string;
}

@doc("The properties of a server machine tracked resource")
model GuestOsDetails {
  @doc("The type of the operating system.")
  osType: string;

  @doc("The name of the operating system.")
  osName: string;

  @doc("The operating system version.")
  osVersion: int64;

  @doc("The operating system architecture.")
  osArchitecture: string;
}

@doc("The properties of a server machine tracked resource")
model Errors {
  @doc("Gets the error message.")
  message: string;

  @doc("Gets the message parameters.")
  messageParameters: Record<string>;

  @doc("Gets the appliance name.")
  applianceName: string;

  @doc("Gets the error ID.")
  id: int64;

  @doc("Gets the error name.")
  code: string;

  @doc("Gets the possible causes of error.")
  possibleCauses: string;

  @doc("Gets the recommended action to resolve error.")
  recommendedAction: string;

  @doc("Gets the error severity.")
  severity: string;

  @doc("Gets the error summary message.")
  summaryMessage: string;

  @doc("Source of the error.")
  source: Source;

  @doc("Gets the time stamp when the error was updated.")
  updatedTimeStamp: zonedDateTime;

  @doc("Gets run as account id used while performing discovery")
  runAsAccountId: string;

  @doc("Gets discovery scope for which the error was encountered.")
  discoveryScope: DiscoveryScope;
}

@doc("Scoped discovery status.")
model DiscoveryState {
  @doc("The discovery scope status")
  discoveryScopeStatus: DiscoveryScopeStatus;

  @doc("The list of errors.")
  errors: Errors[];

  @doc("The run as account ID associated with the discovery.")
  hydratedRunAsAccountId: string;
}

@doc("Application in the guest virtual machine.")
model Applications {
  @doc("Gets or sets Name of the Application.")
  @visibility("read")
  name?: string;

  @doc("Gets or sets Version of the Application.")
  @visibility("read")
  version?: string;

  @doc("Gets or sets Provider of the Application.")
  @visibility("read")
  provider?: string;
}

@doc(" WebApplication in the guest virtual machine.")
model WebApplications {
  @doc(" Gets or sets Name of the WebApplication.")
  name: string;

  @doc("Gets or sets Status of the WebApplication.")
  status: string;

  @doc("Gets or sets Platform of the WebApplication.")
  platform: string;

  @doc("Gets or sets GroupName of the WebApplication.")
  groupName: string;

  @doc("Gets or sets WebServer of the WebApplication.")
  webServer: string;

  @doc("Gets or sets ApplicationPool of the WebApplication.")
  applicationPool: string;
}

@doc("Feature in the guest virtual machine.")
model Features {
  @doc("Gets or sets Name of the Feature.")
  name: string;

  @doc("Gets or sets FeatureType of the Feature.")
  featureType: string;

  @doc("Gets or sets Parent of the Feature.")
  parent: string;

  @doc("Gets or sets Status of the Feature.")
  status: string;
}

@doc("SQLServer in the guest virtual machine.")
model SqlServers {
  @doc(" Gets or sets Name of the SQLServer.")
  name: string;

  @doc("Gets or sets Edition of the SQLServer.")
  edition: string;

  @doc("Gets or sets ServicePack of the SQLServer.")
  servicePack: string;

  @doc("Gets or sets Version of the SQLServer.")
  version: string;

  @doc("Gets or sets whether the SQLServer is Clustered or not.")
  clustered: string;

  @doc("Gets or sets the name of the cluster.")
  clusterName: string;

  @doc("Gets or sets the name of the DNS host.")
  dnsHostName: string;

  @doc("Gets or sets the comma separated list of available ports.")
  port: string;

  @doc("Gets or sets the comma separated IPs.")
  commaSeperatedIps: string;

  @doc("Gets or sets the powered on status.")
  status: string;

  @doc("Gets or sets a value indicating whether Named Pipe protocol is enabled on SQL server")
  isNamedPipeEnabled: string;

  @doc("Gets or sets a value indicating whether TCP/IP protocol is enabled on SQL server.")
  isTcpIpEnabled: string;

  @doc("Gets or sets the Named Pipe name of the SQL server used to construct connection.")
  namedPipeName: string;
}

@doc(" SharePointServer in the guest virtual machine.")
model SharePointServers {
  @doc(" Gets or sets ProductName of the SharePointServer.")
  productName: string;

  @doc("Gets or sets a value indicating whether SharePointServer is Enterprise.")
  isEnterprise: string;

  @doc(" Gets or sets Status of the SharePointServer.")
  status: string;

  @doc(" Gets or sets Version of the SharePointServer.")
  version: string;
}

@doc(" SystemCenter in the guest virtual machine.")
model SystemCenters {
  @doc("Gets or sets ProductName of the SystemCenter.")
  productName: string;

  @doc("Gets or sets Status of the SystemCenter.")
  status: string;

  @doc(" Gets or sets Version of the SystemCenter.")
  version: string;
}

@doc("BizTalkServer in the guest virtual machine.")
model BizTalkServers {
  @doc("Gets or sets ProductName of the BizTalkServer.")
  productName: string;

  @doc("Gets or sets Status of the BizTalkServer.")
  status: string;
}

@doc(" ExchangeServer in the guest virtual machine.")
model ExchangeServers {
  @doc("Gets or sets ProductName of the ExchangeServer.")
  productName: string;

  @doc("Gets or sets Edition of the ExchangeServer.")
  edition: string;

  @doc("Gets or sets Roles of the ExchangeServer.")
  roles: string;

  @doc("Gets or sets ServicePack of the ExchangeServer.")
  servicePack: string;

  @doc("Gets or sets Version of the ExchangeServer.")
  version: string;
}

@doc("OtherDatabase in the guest virtual machine.")
model OtherDatabases {
  @doc("Gets or sets DatabaseType of the OtherDatabase.")
  databaseTypes: string;

  @doc("Gets or sets Instance of the OtherDatabase.")
  instance: string;

  @doc("Gets or sets Version of the OtherDatabase.")
  version: string;
}

@doc("Apps And Roles of the Server")
model AppsAndRoles {
  @doc("Gets or sets Applications of the AppsAndRoles.")
  @OpenAPI.extension("x-ms-identifiers", [])
  applications: Applications[];

  @doc(" Gets or sets WebApplications of the AppsAndRoles.")
  @OpenAPI.extension("x-ms-identifiers", [])
  webApplications: WebApplications[];

  @doc("Gets or sets Features of the AppsAndRoles.")
  @OpenAPI.extension("x-ms-identifiers", [])
  features: Features[];

  @doc("Gets or sets SQLServers of the AppsAndRoles.")
  @OpenAPI.extension("x-ms-identifiers", [])
  sqlServers: SqlServers[];

  @doc("Gets or sets SharePointServers of the AppsAndRoles.")
  @OpenAPI.extension("x-ms-identifiers", [])
  sharePointServers: SharePointServers[];

  @doc(" Gets or sets SystemCenters of the AppsAndRoles.")
  @OpenAPI.extension("x-ms-identifiers", [])
  systemCenters: SystemCenters[];

  @doc(" Gets or sets BizTalkServers of the AppsAndRoles.")
  @OpenAPI.extension("x-ms-identifiers", [])
  bizTalkServers: BizTalkServers[];

  @doc("Gets or sets ExchangeServers of the AppsAndRoles.")
  @OpenAPI.extension("x-ms-identifiers", [])
  exchangeServers: ExchangeServers[];

  @doc("Gets or sets OtherDatabases of the AppsAndRoles.")
  @OpenAPI.extension("x-ms-identifiers", [])
  otherDatabases: OtherDatabases[];
}

@doc("Data related to a machine's operating system.")
model OperatingSystemDetails {
  @doc("Gets or sets the OS Type.")
  osType: string;

  @doc("Gets or sets the OS Name.")
  osName: string;

  @doc("Gets or sets the OS Version.")
  osVersion: string;

  @doc("Gets or sets the OS architecture.")
  osArchitecture: string;
}

import "@cadl-lang/rest";
import "@cadl-lang/versioning";
import "@azure-tools/cadl-providerhub";
import "@azure-tools/cadl-azure-core";
import "@azure-tools/cadl-azure-resource-manager";
import "@cadl-lang/compiler";

import "@cadl-lang/rest";
import "@azure-tools/cadl-autorest";

using Autorest;

using Cadl.Http;
using Cadl.Rest;
using Cadl.Versioning;
using Azure.Core;
using Azure.ResourceManager;
using OpenAPI;

@doc("Azure rest Object")
model AzureRestObject {
  @doc("Gets the relative URL to get this cluster.")
  id: string;

  @doc("Handled by resource provider. Type = Microsoft.OffAzure/hyperVSites/clusters.")
  type: string;

  @doc("Gets or sets the Name of the cluster.")
  name: string;
}

@doc("inner error")
model InnerError {
  @doc("code string ")
  code: string;

  @doc("inner error")
  innererror: InnerError;
}

model ResponseWithHypervSiteUsageSchema<T> {
  @statusCode statusCode: T;
  schema: AzureRestObject; //TODO required Schema
}

model ResponseWithVmwareSiteUsageSchema<T> {
  @statusCode statusCode: T;
  schema: AzureRestObject; //TODO required Schema
}

@doc("A wrapper for required parameter in the body. The intent of model is to add description to 'body' and make it requred.")
model CustomRequiredBodyWrapper<T extends object> {
  @doc("Parameter of type '{name}' in the body.", T)
  @body
  body: T;
}

@doc("Class for site agent properties.")
model SiteAgentProperties {
  @doc("Gets the ID of the agent.")
  @visibility("read")
  id?: string;

  @doc("Gets the version of the agent.")
  @visibility("read")
  version?: string;

  @doc("Gets the last heartbeat time of the agent in UTC.")
  @visibility("read")
  lastHeartBeatUtc?: zonedDateTime;

  @doc("Gets or sets the key vault URI.")
  keyVaultUri?: string;

  @doc("Gets or sets the key vault ARM Id.")
  keyVaultId?: string;
}

// enum HealthErrorDetailsSource {
//   "RefreshFabricLayout",
//   "RefreshFabricLayoutGuest",
//   "RefreshFabricLayoutDependencyMap",
//}

@knownValues(HealthErrorDetailsSource)
scalar MicrosoftAzureFDSWebRoleHealthErrorDetailsSource extends string;

enum HealthErrorDetailsSource {
  RefreshFabricLayout,
  RefreshFabricLayoutGuest,
  RefreshFabricLayoutDependencyMap,
}

@doc("Data related to a machine's SQL discovery.")
model SqlDiscovery {
  @doc("Gets or sets number of SQL servers successfully discovered by SQL agent.")
  successfullyDiscoveredServerCount: int64;

  @doc("Gets or sets total number of SQL servers.")
  totalServerCount: int64;

  @doc("Gets or sets the run as account ID with which SQL Metadata worked successfully")
  sqlMetadataHydratedRunAsAccountId: string;

  @doc("Gets or sets the discovery pipe used for fetching SQL Server's metadata from registry.")
  sqlMetadataDiscoveryPipe: string;

  @doc("Gets or sets status of partner discovery.")
  discoveryScopeStatus: DiscoveryScopeStatus;
}

@doc("Data related to a machine's WebApps discovery.")
model WebAppDiscovery {
  @doc("Gets or sets number of successfully discovered web servers..")
  totalWebServerCount: int64;

  @doc("Gets or sets number of successfully discovered web applications.")
  totalWebApplicationCount: int64;

  @doc("Gets or sets status of partner discovery.")
  discoveryScopeStatus: DiscoveryScopeStatus;
}

@doc("Data related to a machine's Oracle discovery.")
model OracleDiscovery {
  @doc("Gets or sets number of successfully discovered instances.")
  totalInstanceCount: int64;

  @doc("Gets or sets number of successfully discovered databases.")
  totalDatabaseCount: int64;

  @doc("Gets or sets status of partner discovery.")
  discoveryScopeStatus: DiscoveryScopeStatus;
}

@doc("Data related to a machine's spring boot discovery.")
model SpringBootDiscovery {
  @doc("Gets or sets number of successfully discovered instances.")
  totalInstanceCount: int64;

  @doc("Gets or sets number of successfully discovered applications.")
  totalApplicationCount: int64;

  @doc("Gets or sets status of partner discovery.")
  discoveryScopeStatus: DiscoveryScopeStatus;
}

@doc("hyperv cluster")
model HypervCluster {
  @doc("Gets or sets the type of the operating system.")
  osType?: string;

  @doc("Gets or sets the Name of the operating system.")
  osName?: string;

  @doc("Gets or sets the Version of the operating system.")
  osVersion?: string;

  @doc("Gets or sets the Architecture of the operating system.")
  osArchitecture?: string;
}

enum DependencyMapDiscoveryScopeStatus {
  "DiscoverySucceededAtleastOnce",
  "DiscoveryFailed",
  "RunAsAccountNotAssociated",
  "DiscoveryNotStarted",
  "DiscoveryInProgress",
  "Disabled",
  "DiscoveryPartiallySucceded",
  "DiscoverySucceeded",
}

enum HealthErrorDetailsDiscoveryScope {
  "AppsAndRoles",
  "DependencyMap",
  "StaticData",
  "SQLServerConnectionInfo",
}

@doc("Error contract returned when some exception occurs in Rest API.")
model HealthErrorDetails {
  @doc("Gets the error message.")
  @visibility("read")
  message?: string;

  @doc("Gets the message parameters.")
  @visibility("read")
  messageParameters?: Record<string>;

  @doc("Gets the appliance name.")
  @visibility("read")
  applianceName?: string;

  @doc("Gets the error ID.")
  @visibility("read")
  id?: int32;

  @doc("Gets the error name.")
  @visibility("read")
  code?: string;

  @doc("Gets the possible causes of error.")
  @visibility("read")
  possibleCauses?: string;

  @doc("Gets the recommended action to resolve error.")
  @visibility("read")
  recommendedAction?: string;

  @doc("Gets the error severity.")
  @visibility("read")
  severity?: string;

  @doc("Gets the error summary message.")
  @visibility("read")
  summaryMessage?: string;

  @doc("Gets the error source.")
  @visibility("read")
  source?: HealthErrorDetailsSource;

  @doc("Gets the time stamp when the error was updated.")
  @visibility("read")
  updatedTimeStamp?: zonedDateTime;

  @doc("Gets run as account id used while performing discovery             of entity.")
  @visibility("read")
  runAsAccountId?: string;

  @doc("Gets discovery scope for which             error is encountered.")
  @visibility("read")
  discoveryScope?: HealthErrorDetailsDiscoveryScope;
}

@doc("Contains data related dependency map discovery scope.")
model DependencyMapDiscovery {
  @doc("Gets discovery scope status.")
  @visibility("read")
  discoveryScopeStatus?: DependencyMapDiscoveryScopeStatus;

  @doc("Gets errors for discovery scope.")
  @visibility("read")
  errors?: HealthErrorDetails[];

  @doc("""
Gets the run as account ID with which feature worked successfully.
           
It is discovered by the agent from the list of credentials.
""")
  @visibility("read")
  hydratedRunAsAccountId?: string;
}

@doc("Contains data related static data discovery scope.")
model StaticDiscovery {
  @doc("Gets discovery scope status.")
  @visibility("read")
  discoveryScopeStatus?: StaticDiscoveryScopeStatus;

  @doc("Gets errors for discovery scope.")
  @visibility("read")
  errors?: HealthErrorDetails[];

  @doc("""
Gets the run as account ID with which feature worked successfully.
           
It is discovered by the agent from the list of credentials.
""")
  @visibility("read")
  hydratedRunAsAccountId?: string;
}

enum SQLDiscoveryScopeStatus {
  "DiscoverySucceededAtleastOnce",
  "DiscoveryFailed",
  "RunAsAccountNotAssociated",
  "DiscoveryNotStarted",
  "DiscoveryInProgress",
  "Disabled",
  "DiscoveryPartiallySucceded",
  "DiscoverySucceeded",
}

enum SQLDiscoverySqlMetadataDiscoveryPipe {
  "Unknown",
  "VMware",
  "PowerShell",
  "SSH",
  "CIM",
  "Other",
}

enum OracleDiscoveryScopeStatus {
  "DiscoverySucceededAtleastOnce",
  "DiscoveryFailed",
  "RunAsAccountNotAssociated",
  "DiscoveryNotStarted",
  "DiscoveryInProgress",
  "Disabled",
  "DiscoveryPartiallySucceded",
  "DiscoverySucceeded",
}

@doc("Application in the guest virtual machine.")
model Application {
  @doc("Gets or sets Name of the Application.")
  @visibility("read")
  name?: string;

  @doc("Gets or sets Version of the Application.")
  @visibility("read")
  version?: string;

  @doc("Gets or sets Provider of the Application.")
  @visibility("read")
  provider?: string;
}

@doc("Second level object returned as part of Machine REST resource.")
model OperatingSystem {
  @doc("Gets or sets the type of the operating system.")
  osType?: string;

  @doc("Gets or sets the Name of the operating system.")
  osName?: string;

  @doc("Gets or sets the Version of the operating system.")
  osVersion?: string;

  @doc("Gets or sets the Architecture of the operating system.")
  osArchitecture?: string;
}
enum StaticDiscoveryScopeStatus {
  "DiscoverySucceededAtleastOnce",
  "DiscoveryFailed",
  "RunAsAccountNotAssociated",
  "DiscoveryNotStarted",
  "DiscoveryInProgress",
  "Disabled",
  "DiscoveryPartiallySucceded",
  "DiscoverySucceeded",
}

#suppress "@azure-tools/cadl-azure-core/casing-style"
@doc("Contains data related SQL discovery.")
model SQLDiscovery {
  @doc(" successfully Discovered ServerCount")
  successfullyDiscoveredServerCount?: int32;

  @doc("total Server Count")
  totalServerCount?: int32;

  @doc("sql Metadata Hydrated RunAsAccountId")
  sqlMetadataHydratedRunAsAccountId?: string;

  @doc("sql Metadata DiscoveryPipe")
  sqlMetadataDiscoveryPipe?: SQLDiscoverySqlMetadataDiscoveryPipe;

  @doc("discovery Scope Status")
  discoveryScopeStatus?: SQLDiscoveryScopeStatus;
}

enum ApplicationDiscoveryScopeStatus {
  "DiscoverySucceededAtleastOnce",
  "DiscoveryFailed",
  "RunAsAccountNotAssociated",
  "DiscoveryNotStarted",
  "DiscoveryInProgress",
  "Disabled",
  "DiscoveryPartiallySucceded",
  "DiscoverySucceeded",
}

@doc("Contains data related application and roles discovery scope.")
model ApplicationDiscovery {
  // @doc("Gets discovery scope status.")
  // @visibility("read")
  // "discoveryScopeStatus"?: ApplicationDiscoveryScopeStatus;
  @doc("Gets errors for discovery scope.")
  @visibility("read")
  errors?: HealthErrorDetails[];

  @doc("""
Gets the run as account ID with which feature worked successfully.
           
It is discovered by the agent from the list of credentials.
""")
  @visibility("read")
  hydratedRunAsAccountId?: string;
}

#suppress "@azure-tools/cadl-azure-core/casing-style"
@doc("Second level object.  Data related to a machine's operating system.             Serialized and stored as part of Machine Rest object. ")
model GuestOSDetails {
  @doc("Gets or sets the type of the operating system.")
  osType?: string;

  @doc("Gets or sets the Name of the operating system.")
  osName?: string;

  @doc("Gets or sets the Version of the operating system.")
  osVersion?: string;

  @doc("Gets or sets the Architecture of the operating system.")
  osArchitecture?: string;
}

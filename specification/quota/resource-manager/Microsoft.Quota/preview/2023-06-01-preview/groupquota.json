{
  "swagger": "2.0",
  "info": {
    "title": "Azure MG Group Quota using SharedQuotaEntity.",
    "version": "2023-06-01-preview",
    "description": "Microsoft Azure Quota Resource Provider"
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "security": [
    {
      "azure_auth": [
        "user_impersonation"
      ]
    }
  ],
  "securityDefinitions": {
    "azure_auth": {
      "flow": "implicit",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "scopes": {
        "user_impersonation": "impersonate your user account"
      },
      "type": "oauth2",
      "description": "Azure Active Directory OAuth 2.0 authorization"
    }
  },
  "paths": {
    "/providers/Microsoft.Management/managementGroups/{mgId}/providers/Microsoft.Quota/sharedQuotaEntities/{sharedQuotaEntityName}": {
      "put": {
        "tags": [
          "SharedQuotaEntity"
        ],
        "summary": "Creates a new sharedQuotaEntity for the name passed.",
        "description": "Creates a new sharedQuotaEntity for the name passed. A sharedQuotaEntityRequestId will be returned by the Service. The status can be polled periodically. The status Async polling is using standards defined at - https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations. Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to Get URI and full details can be checked.",
        "operationId": "SharedQuotaEntity_Create",
        "x-ms-examples": {
          "GroupQuotaLimits_Put_Request_ForCompute": {
            "$ref": "./examples/PutSharedQuotaEntity.json"
          }
        },
        "x-ms-long-running-operation": true,
        "parameters": [
          {
            "$ref": "#/parameters/MgIdInParameters"
          },
          {
            "$ref": "#/parameters/SharedQuotaEntityNameInParameters"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          },
          {
            "name": "SharedQuotaEntityRequest",
            "in": "body",
            "description": "The SharedQuotaEntity Request.",
            "schema": {
              "$ref": "#/definitions/SharedQuotaEntity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "schema": {
              "$ref": "#/definitions/SharedQuotaEntity"
            }
          },
          "202": {
            "description": "Request Accepted",
            "headers": {
              "Retry-After": {
                "description": "The recommended number of seconds to wait before calling the URI specified in Azure-AsyncOperation.",
                "type": "integer",
                "format": "int64"
              },
              "Location": {
                "description": "URL for determining when an operation has completed. Send a GET request to the URL in Location header.\nThe URI should return a 202 until the operation reaches a terminal state and 200 once it reaches a terminal state.\n\nFor more info: https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#202-accepted-and-location-headers",
                "type": "string"
              },
              "Azure-AsyncOperation": {
                "description": "The URI to poll for completion status.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/OperationsStatus"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "SharedQuotaEntity"
        ],
        "summary": "Updates a new sharedQuotaEntity for the name passed.",
        "description": "Updates the sharedQuotaEntity for the name passed. A sharedQuotaEntityRequestId will be returned by the Service. The status can be polled periodically. The status Async polling is using standards defined at - https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations. Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to Get URI and full details can be checked. \n Any change in the filters will be applicable to the future quota assignments, existing quota assigned to subscriptions from the sharedQuotaEntity remains unchanged.",
        "operationId": "SharedQuotaEntity_Update",
        "x-ms-examples": {
          "GroupQuotaLimits_Put_Request_ForCompute": {
            "$ref": "./examples/PatchSharedQuotaEntity.json"
          }
        },
        "x-ms-long-running-operation": true,
        "parameters": [
          {
            "$ref": "#/parameters/MgIdInParameters"
          },
          {
            "$ref": "#/parameters/SharedQuotaEntityNameInParameters"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          },
          {
            "name": "SharedQuotaEntityRequest",
            "in": "body",
            "description": "The SharedQuotaEntity Request.",
            "schema": {
              "$ref": "#/definitions/SharedQuotaEntity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "schema": {
              "$ref": "#/definitions/SharedQuotaEntity"
            }
          },
          "202": {
            "description": "Request Accepted",
            "headers": {
              "Retry-After": {
                "description": "The recommended number of seconds to wait before calling the URI specified in Azure-AsyncOperation.",
                "type": "integer",
                "format": "int64"
              },
              "Location": {
                "description": "URL for determining when an operation has completed. Send a GET request to the URL in Location header.\nThe URI should return a 202 until the operation reaches a terminal state and 200 once it reaches a terminal state.\n\nFor more info: https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#202-accepted-and-location-headers",
                "type": "string"
              },
              "Azure-AsyncOperation": {
                "description": "The URI to poll for completion status.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/OperationsStatus"
            }
          },
          "default": {
            "description": "Bad Request",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "get": {
        "tags": [
          "SharedQuotaEntity"
        ],
        "summary": "Gets sharedQuotaEntity for the name passed.",
        "description": "Gets the sharedQuotaEntity for the name passed. It will display the SharedQuotaEntity properties only.The details on groupQuota can be access from the groupQuota APIs.",
        "operationId": "SharedQuotaEntity_Get",
        "x-ms-examples": {
          "GroupQuotaLimits_Put_Request_ForCompute": {
            "$ref": "./examples/GetSharedQuotaEntity.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/MgIdInParameters"
          },
          {
            "$ref": "#/parameters/SharedQuotaEntityNameInParameters"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "schema": {
              "$ref": "#/definitions/SharedQuotaEntity"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorContent"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "SharedQuotaEntity"
        ],
        "summary": "Deletes sharedQuotaEntity for the name passed.",
        "description": "Deletes the sharedQuotaEntity for the name passed. All the remaining shareQuota in the sharedQuotaEntity will be lost.",
        "operationId": "SharedQuotaEntity_Delete",
        "x-ms-examples": {
          "GroupQuotaLimits_Put_Request_ForCompute": {
            "$ref": "./examples/DeleteSharedQuotaEntity.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/MgIdInParameters"
          },
          {
            "$ref": "#/parameters/SharedQuotaEntityNameInParameters"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK."
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorContent"
            }
          }
        }
      }
    },
    "/providers/Microsoft.Management/managementGroups/{mgId}/providers/Microsoft.Quota/sharedQuotaEntities": {
      "get": {
        "tags": [
          "SharedQuotaEntity"
        ],
        "summary": "Lists sharedQuotaEntities for the scope passed.",
        "description": "Lists sharedQuotaEntities for the scope passed. It will display the SharedQuotaEntity properties only.The details on groupQuota can be access from the groupQuota APIs.",
        "operationId": "SharedQuotaEntity_List",
        "x-ms-examples": {
          "GroupQuotaLimits_Put_Request_ForCompute": {
            "$ref": "./examples/GetSharedQuotaEntityList.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/MgIdInParameters"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "schema": {
              "$ref": "#/definitions/SharedQuotaEntityList"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorContent"
            }
          }
        }
      }
    },
    "/providers/Microsoft.Management/managementGroups/{mgId}/{scope}/providers/Microsoft.Quota/sharedQuotaEntities/{sharedQuotaEntityName}/groupQuotaLimits/{resourceName}": {
      "put": {
        "tags": [
          "GroupQuotaLimits"
        ],
        "summary": "Creates a new Group Quota request for a specific resources.",
        "description": "Creates a new Group Quota request for a specific resources. A groupQuotaRequestId will be returned by the Service. The status can be polled periodically. The status Async polling is using standards defined at - https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations. Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to Get URI and full details can be checked.",
        "operationId": "GroupQuotaLimits_Create",
        "x-ms-examples": {
          "GroupQuotaLimits_Put_Request_ForCompute": {
            "$ref": "./examples/PutGroupQuotaLimits-Compute.json"
          }
        },
        "x-ms-long-running-operation": true,
        "parameters": [
          {
            "$ref": "#/parameters/MgIdInParameters"
          },
          {
            "$ref": "#/parameters/ScopeInParameters"
          },
          {
            "$ref": "#/parameters/SharedQuotaEntityNameInParameters"
          },
          {
            "$ref": "#/parameters/ResourceInParameters"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          },
          {
            "name": "groupQuotaRequest",
            "in": "body",
            "description": "The GroupQuota Request.",
            "schema": {
              "$ref": "#/definitions/GroupQuotaLimit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK. Returns the quota details.",
            "schema": {
              "$ref": "#/definitions/GroupQuotaLimit"
            }
          },
          "202": {
            "description": "Request Accepted",
            "headers": {
              "Retry-After": {
                "description": "The recommended number of seconds to wait before calling the URI specified in Azure-AsyncOperation.",
                "type": "integer",
                "format": "int64"
              },
              "Location": {
                "description": "URL for determining when an operation has completed. Send a GET request to the URL in Location header.\nThe URI should return a 202 until the operation reaches a terminal state and 200 once it reaches a terminal state.\n\nFor more info: https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#202-accepted-and-location-headers",
                "type": "string"
              },
              "Azure-AsyncOperation": {
                "description": "The URI to poll for completion status.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/OperationsStatus"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "GroupQuotaLimits"
        ],
        "summary": "Creates/Updates a new Group Quota request for a specific resources.",
        "description": "Creates/Updates a new Group Quota request for a specific resources. A groupQuotaRequestId will be returned by the Service. The status will be updated periodically. The status Async polling is using standards defined at - https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations. Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in retry-after header. Once the operation gets to terminal state - Succeeded | Failed,then the URI will change to Get URI and full details can be checked.",
        "operationId": "GroupQuotaLimits_Update",
        "x-ms-examples": {
          "GroupQuotaLimits_Put_Request_ForCompute": {
            "$ref": "./examples/PatchGroupQuotaLimits-Compute.json"
          }
        },
        "x-ms-long-running-operation": true,
        "parameters": [
          {
            "$ref": "#/parameters/MgIdInParameters"
          },
          {
            "$ref": "#/parameters/ScopeInParameters"
          },
          {
            "$ref": "#/parameters/SharedQuotaEntityNameInParameters"
          },
          {
            "$ref": "#/parameters/ResourceInParameters"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          },
          {
            "name": "groupQuotaRequest",
            "in": "body",
            "description": "The GroupQuota Request.",
            "schema": {
              "$ref": "#/definitions/GroupQuotaLimit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK. Returns the quota details.",
            "schema": {
              "$ref": "#/definitions/GroupQuotaLimit"
            }
          },
          "202": {
            "description": "Request Accepted",
            "headers": {
              "Retry-After": {
                "description": "The recommended number of seconds to wait before calling the URI specified in Azure-AsyncOperation.",
                "type": "integer",
                "format": "int64"
              },
              "Location": {
                "description": "URL for determining when an operation has completed. Send a GET request to the URL in Location header.\nThe URI should return a 202 until the operation reaches a terminal state and 200 once it reaches a terminal state.\n\nFor more info: https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#202-accepted-and-location-headers",
                "type": "string"
              },
              "Azure-AsyncOperation": {
                "description": "The URI to poll for completion status.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/OperationsStatus"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v2/types.json#/definitions/ErrorResponse"
            }
          }
        }
      },
      "get": {
        "tags": [
          "GroupQuotaLimits"
        ],
        "summary": "Gets the resource groupQuotaLimits for the MGId.",
        "description": "Gets the resource groupQuotaLimits for the MGId. It will include the limits, availableLimits, assignedToSubscriptions: Quotas assigned to subscriptions from the groupQuota.",
        "operationId": "GroupQuotaLimits_Get",
        "x-ms-examples": {
          "GroupQuotaLimits_Get_Request_ForCompute": {
            "$ref": "./examples/GetGroupQuotaLimits-Compute.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/MgIdInParameters"
          },
          {
            "$ref": "#/parameters/ScopeInParameters"
          },
          {
            "$ref": "#/parameters/SharedQuotaEntityNameInParameters"
          },
          {
            "$ref": "#/parameters/ResourceInParameters"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GroupQuotaLimit"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorContent"
            }
          }
        }
      }
    },
    "/providers/Microsoft.Management/managementGroups/{mgId}/{scope}/providers/Microsoft.Quota/sharedQuotaEntities/{sharedQuotaEntityName}/groupQuotaLimits": {
      "get": {
        "tags": [
          "GroupQuotaLimits"
        ],
        "summary": "Gets the List of resources groupQuotaLimits for the MGId, based on the scope.",
        "description": "Gets the List of resources groupQuotaLimits for the MGId, based on the scope. The scope can be - providers/Microsoft.Compute/locations/<eastus>. The list elements will be same as the Get API - It will include the limits, availableLimits, assignedToSubscriptions: Quotas assigned to subscriptions from the groupQuota.",
        "operationId": "GroupQuotaLimits_List",
        "x-ms-examples": {
          "GroupQuotaLimits_Get_Request_ForCompute": {
            "$ref": "./examples/ListGroupQuotaLimits-Compute.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/MgIdInParameters"
          },
          {
            "$ref": "#/parameters/ScopeInParameters"
          },
          {
            "$ref": "#/parameters/SharedQuotaEntityNameInParameters"
          },
          {
            "$ref": "#/parameters/ResourceInParameters"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GroupQuotaList"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorContent"
            }
          }
        }
      }
    },
    "/providers/Microsoft.Management/managementGroups/{mgId}/{scope}/providers/Microsoft.Quota/sharedQuotaEntities/{sharedQuotaEntityName}/groupQuotaRequests": {
      "get": {
        "tags": [
          "GroupQuota-Requests"
        ],
        "summary": "List the status of all GroupQuota requests.",
        "description": "List API to check the status of a GroupQuota requests by requestId. The groupQuotaRequest history is maintained for 1 year.",
        "operationId": "GroupQuota-Requests_List",
        "x-ms-examples": {
          "MG-GroupQuota-Order_Get_Response_ForCompute": {
            "$ref": "./examples/GetCapacityOrder-Compute.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/MgIdInParameters"
          },
          {
            "$ref": "#/parameters/ScopeInParameters"
          },
          {
            "$ref": "#/parameters/SharedQuotaEntityNameInParameters"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success, with the details of the groupQuota request.",
            "schema": {
              "$ref": "#/definitions/SubmittedResourceRequestStatusList"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorContent"
            }
          },
          "429": {
            "description": "Too many Request",
            "x-ms-error-response": true,
            "schema": {
              "$ref": "#/definitions/ErrorContent"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorContent"
            }
          }
        }
      }
    },
    "/providers/Microsoft.Management/managementGroups/{mgId}/{scope}/providers/Microsoft.Quota/sharedQuotaEntities/{sharedQuotaEntityName}/groupQuotaRequests/{requestId}": {
      "get": {
        "tags": [
          "GroupQuota-Requests"
        ],
        "summary": "Get the status of a single GroupQuota request by requestId.",
        "description": "Get API to check the status of a GroupQuota request by requestId.  Use the polling API - OperationsStatus URI specified in Azure-AsyncOperation header field, with retry-after duration in seconds to check the intermediate status. This API provides the finals status with the request details and status.",
        "operationId": "GroupQuota-Requests_Get",
        "x-ms-examples": {
          "MG-GroupQuota-Order_Get_Response_ForCompute": {
            "$ref": "./examples/GetCapacityOrder-Compute.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/MgIdInParameters"
          },
          {
            "$ref": "#/parameters/ScopeInParameters"
          },
          {
            "$ref": "#/parameters/SharedQuotaEntityNameInParameters"
          },
          {
            "$ref": "#/parameters/RequestIdInParameters"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success, with the details of the groupQuota request.",
            "schema": {
              "$ref": "#/definitions/SubmittedResourceRequestStatus"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorContent"
            }
          }
        }
      }
    },
    "/providers/Microsoft.Management/managementGroups/{mgId}/subscriptions/{subscriptionId}/{scope}/providers/Microsoft.Quota/sharedQuotaEntities/{sharedQuotaEntityName}/quotaAllocations": {
      "get": {
        "tags": [
          "SubscriptionQuota-Allocation"
        ],
        "summary": "Gets all the quota assigned to a subscription for the specific Resource Provider, Location.",
        "description": "Gets all the quota assigned to a subscription for the specific Resource Provider, Location. This will include the GroupQuota and total quota assigned to the subscription. Only the Group quota assigned to the subscription can be assigned back to the MG Group Quota.",
        "operationId": "ShareQuotaMGSubscription_List",
        "x-ms-examples": {
          "GroupQuota_Put_Request_ForCompute": {
            "$ref": "./examples/PutQuotaAllocation-Compute.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/MgIdInParameters"
          },
          {
            "$ref": "#/parameters/SubscriptionIdInParameters"
          },
          {
            "$ref": "#/parameters/ScopeInParameters"
          },
          {
            "$ref": "#/parameters/SharedQuotaEntityNameInParameters"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SubscriptionQuotaDetailsList"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorContent"
            }
          }
        }
      }
    },
    "/providers/Microsoft.Management/managementGroups/{mgId}/subscriptions/{subscriptionId}/{scope}/providers/Microsoft.Quota/sharedQuotaEntities/{sharedQuotaEntityName}/quotaAllocations/{resourceName}": {
      "put": {
        "tags": [
          "SubscriptionQuota-Allocation"
        ],
        "summary": "Request to assign quota from group quota to a specific Subscription. This request will use Asynchronous pattern to check the status using Async polling as standards defined at - https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.",
        "description": "Request to assign a specific resource quota from group quota to a specific Subscription. The subscriptions can also reduce the quota assigned to subscription to give back the group back to MG. The quota assignment back to MG groupQuota is limited by the GroupQuota assigned to subscription, which means the maximum unused quota assigned back to MG groupQuota will be the groupQuota assigned to the subscriptions. So, this API can used to assign Quota to subscriptions and assign back unused quota, which was previously assigned from MG groupQuota to subscription.",
        "operationId": "GroupQuotaSubscriptionQuotaAllocation_Create",
        "x-ms-examples": {
          "ShareQuotaOrder_Subscription_Allocation_Put_ForCompute": {
            "$ref": "./examples/PutQuotaAllocation-Compute.json"
          }
        },
        "x-ms-long-running-operation": true,
        "parameters": [
          {
            "$ref": "#/parameters/MgIdInParameters"
          },
          {
            "$ref": "#/parameters/SubscriptionIdInParameters"
          },
          {
            "$ref": "#/parameters/ScopeInParameters"
          },
          {
            "$ref": "#/parameters/SharedQuotaEntityNameInParameters"
          },
          {
            "$ref": "#/parameters/ResourceInParameters"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          },
          {
            "name": "allocateQuotaRequest",
            "in": "body",
            "description": "Quota requests payload.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubscriptionQuotaAllocationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request status details.",
            "schema": {
              "$ref": "#/definitions/SubscriptionQuotaAllocationRequest"
            }
          },
          "202": {
            "description": "Request Accepted",
            "headers": {
              "Retry-After": {
                "description": "The recommended number of seconds to wait before calling the URI specified in Azure-AsyncOperation.",
                "type": "integer",
                "format": "int64"
              },
              "Location": {
                "description": "URL for determining when an operation has completed. Send a GET request to the URL in Location header.\nThe URI should return a 202 until the operation reaches a terminal state and 200 once it reaches a terminal state.\n\nFor more info: https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#202-accepted-and-location-headers",
                "type": "string"
              },
              "Azure-AsyncOperation": {
                "description": "The URI to poll for completion status.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/OperationsStatus"
            },
            "default": {
              "description": "Error",
              "schema": {
                "$ref": "#/definitions/ErrorContent"
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "SubscriptionQuota-Allocation"
        ],
        "summary": "Request to assign quota from group quota to a specific Subscription. This request will use Asynchronous pattern with 202 response and status polling API.",
        "description": "Request to assign quota from group quota to a specific Subscription. The subscriptions and reduce the quota assigned to subscription to give back the group back to MG. The quota assignment back to MG groupQuota is limited by the GroupQuota assigned to subscription, using this API. So, this API can used to assign Quota to subscriptions and assign back unused quota, which was previously assigned from MG groupQuota to subscription(s).",
        "operationId": "GroupQuotaSubscriptionQuotaAllocation_Update",
        "x-ms-examples": {
          "SharedQuota_Subscription_Allocation_Patch_ForCompute": {
            "$ref": "./examples/PatchQuotaAllocation-Compute.json"
          }
        },
        "x-ms-long-running-operation": true,
        "parameters": [
          {
            "$ref": "#/parameters/MgIdInParameters"
          },
          {
            "$ref": "#/parameters/SubscriptionIdInParameters"
          },
          {
            "$ref": "#/parameters/ScopeInParameters"
          },
          {
            "$ref": "#/parameters/SharedQuotaEntityNameInParameters"
          },
          {
            "$ref": "#/parameters/ResourceInParameters"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          },
          {
            "name": "allocateQuotaRequest",
            "in": "body",
            "description": "Quota requests payload.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubscriptionQuotaAllocationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request status details.",
            "schema": {
              "$ref": "#/definitions/SubscriptionQuotaAllocationRequest"
            }
          },
          "202": {
            "description": "Request Accepted",
            "headers": {
              "Retry-After": {
                "description": "The recommended number of seconds to wait before calling the URI specified in Azure-AsyncOperation.",
                "type": "integer",
                "format": "int64"
              },
              "Location": {
                "description": "URL for determining when an operation has completed. Send a GET request to the URL in Location header.\nThe URI should return a 202 until the operation reaches a terminal state and 200 once it reaches a terminal state.\n\nFor more info: https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#202-accepted-and-location-headers",
                "type": "string"
              },
              "Azure-AsyncOperation": {
                "description": "The URI to poll for completion status.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/OperationsStatus"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorContent"
            }
          }
        }
      },
      "get": {
        "tags": [
          "SubscriptionQuota-Allocation"
        ],
        "summary": "Gets Quota assigned to a subscription for the specific Resource Provider, Location, ResourceName.",
        "description": "Gets Quota assigned to a subscription for the specific Resource Provider, Location, ResourceName. This will include the GroupQuota and total quota assigned to the subscription. Only the Group quota assigned to the subscription can be assigned back to the MG Group Quota.",
        "operationId": "GroupQuotaSubscriptionQuotaAllocation_Get",
        "x-ms-examples": {
          "ShareQuotaOrder_Subscription_Allocation_Get_ForCompute": {
            "$ref": "./examples/GetQuotaAllocation-Compute.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/MgIdInParameters"
          },
          {
            "$ref": "#/parameters/SubscriptionIdInParameters"
          },
          {
            "$ref": "#/parameters/ScopeInParameters"
          },
          {
            "$ref": "#/parameters/SharedQuotaEntityNameInParameters"
          },
          {
            "$ref": "#/parameters/ResourceInParameters"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SubscriptionQuotaLimit"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorContent"
            }
          }
        }
      }
    },
    "/providers/Microsoft.Management/managementGroups/{mgId}/subscriptions/{subscriptionId}/{scope}/providers/Microsoft.Quota/sharedQuotaEntities/{sharedQuotaEntityName}/quotaAllocationRequests/{allocationId}": {
      "get": {
        "tags": [
          "Subscription-Quota-Allocation-Requests"
        ],
        "operationId": "GroupQuotaSubscriptionQuotaAllocationRequests_Get",
        "summary": "Get the status of the quota allocation request for the subscriptionId.",
        "description": "Get the quota allocation request status for the subscriptionId by allocationId.",
        "x-ms-examples": {
          "GroupQuotaAllocationRequest_Get_Request_ForCompute": {
            "$ref": "./examples/GetQuotaAllocation-Compute.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/MgIdInParameters"
          },
          {
            "$ref": "#/parameters/SubscriptionIdInParameters"
          },
          {
            "$ref": "#/parameters/ScopeInParameters"
          },
          {
            "$ref": "#/parameters/SharedQuotaEntityNameInParameters"
          },
          {
            "$ref": "#/parameters/AllocationIdInParameters"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SubscriptionQuotaAllocationRequest"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorContent"
            }
          }
        }
      }
    },
    "/providers/Microsoft.Management/managementGroups/{mgId}/subscriptions/{subscriptionId}/{scope}/providers/Microsoft.Quota/sharedQuotaEntities/{sharedQuotaEntityName}/quotaAllocationRequests": {
      "get": {
        "tags": [
          "Subscription-Quota-Allocation-Requests"
        ],
        "operationId": "SubscriptionGroupQuotaAllocationRequest_List",
        "summary": "Lists all the quota allocation requests.to subscriptions",
        "description": "Lists all the allocation requests.",
        "x-ms-examples": {
          "QuotaCapacityOrder_Put_Request_ForCompute": {
            "$ref": "./examples/GetQuotaAllocation-Compute.json"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/MgIdInParameters"
          },
          {
            "$ref": "#/parameters/SubscriptionIdInParameters"
          },
          {
            "$ref": "#/parameters/ScopeInParameters"
          },
          {
            "$ref": "#/parameters/SharedQuotaEntityNameInParameters"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SubscriptionQuotaAllocationRequestList"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorContent"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Error": {
      "type": "object",
      "description": "Standard error response as per MS guidelines. We may skip some fields.",
      "properties": {
        "code": {
          "type": "string"
        },
        "target": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "innerError": {
          "$ref": "#/definitions/InnerError"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ErrorDetails"
          },
          "x-ms-identifiers": []
        }
      }
    },
    "ErrorContent": {
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error"
        }
      }
    },
    "ErrorDetails": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "target": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "InnerError": {
      "type": "object",
      "properties": {
        "trace": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "context": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "RequestState": {
      "description": "Request status.",
      "enum": [
        "Accepted",
        "Invalid",
        "Succeeded",
        "Failed",
        "InProgress"
      ],
      "readOnly": true,
      "type": "string",
      "x-ms-enum": {
        "name": "RequestState",
        "modelAsString": true
      }
    },
    "OperationsStatus": {
      "description": "A long running process operation Status. Based on - https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#202-accepted-and-location-headers",
      "type": "object",
      "properties": {
        "id": {
          "description": "The operation status identifier. It should match what is used to GET the operation resource.",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "readOnly": true,
          "description": "It must match the last segment of the id field, and will typically be a GUID / system generated value."
        },
        "type": {
          "description": "The type.",
          "type": "string",
          "readOnly": true
        },
        "status": {
          "$ref": "#/definitions/RequestState",
          "readOnly": true
        },
        "error": {
          "$ref": "#/definitions/ErrorContent",
          "readOnly": true
        }
      }
    },
    "AssignedToSubscription": {
      "type": "object",
      "description": "SubscriptionIds and quota allocated to subscriptions from the GroupQuota.",
      "additionalProperties": {
        "type": "integer",
        "format": "int64",
        "description": "Group Quota assigned to subscription."
      }
    },
    "AssignedQuotaToSubscriptionList": {
      "type": "array",
      "readOnly": true,
      "description": "Assigned Group Quota to subscriptions.",
      "items": {
        "$ref": "#/definitions/AssignedToSubscription"
      },
      "x-ms-identifiers": []
    },
    "GroupQuotaLimit": {
      "type": "object",
      "description": "Group Quota limit.",
      "x-ms-azure-resource": true,
      "properties": {
        "id": {
          "description": "The resource ID.",
          "type": "string",
          "readOnly": true
        },
        "type": {
          "description": "The type.",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "description": "The resource name.",
          "type": "string",
          "readOnly": true
        },
        "properties": {
          "description": "Group Quota properties for the specified resource.",
          "$ref": "#/definitions/GroupQuotaDetails"
        }
      }
    },
    "ResourceName": {
      "type": "object",
      "description": "Name of the resource provided by the resource Provider. This property is already included in the request URI, so it is a readonly property returned in the response.",
      "properties": {
        "value": {
          "description": "Resource name.",
          "type": "string",
          "readOnly": true
        },
        "localizedValue": {
          "description": "Resource display name.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "GroupQuotaDetails": {
      "type": "object",
      "description": "Group Quota details.",
      "properties": {
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "The current Group Quota Limit at the parentId level."
        },
        "name": {
          "$ref": "#/definitions/ResourceName",
          "description": "The resource name, such as SKU name."
        },
        "unit": {
          "description": " The usages units, such as Count and Bytes. When requesting quota, use the **unit** value returned in the GET response in the request body of your PUT operation.",
          "type": "string",
          "readOnly": true
        },
        "availableLimit": {
          "type": "integer",
          "format": "int64",
          "readOnly": true,
          "description": "The available Group Quota Limit at the MG level. This Group quota can be assigned to subscription(s)."
        },
        "assignedToSubscriptions": {
          "$ref": "#/definitions/AssignedQuotaToSubscriptionList"
        }
      }
    },
    "GroupQuotaList": {
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "description": "List of Group Quotas at MG level.",
          "items": {
            "$ref": "#/definitions/GroupQuotaLimit"
          }
        }
      }
    },
    "SubscriptionQuotaAllocationRequest": {
      "type": "object",
      "description": "The new quota limit for the subscription.",
      "properties": {
        "id": {
          "description": "The operation status identifier. It should match what is used to GET the operation resource.",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "readOnly": true,
          "description": "It must match the last segment of the id field, and will typically be a GUID / system generated value."
        },
        "type": {
          "description": "The type.",
          "type": "string",
          "readOnly": true
        },
        "status": {
          "$ref": "#/definitions/RequestState",
          "readOnly": true
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "The new quota limit for the subscription. The incremental quota will be assigned from pre-approved groupQuota."
        }
      }
    },
    "SubscriptionQuotaAllocationRequestList": {
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "description": "Assigned Group Quota to subscriptions.",
          "items": {
            "$ref": "#/definitions/SubscriptionQuotaAllocationRequest"
          }
        }
      }
    },
    "SubscriptionGroupQuotaAssignment": {
      "type": "object",
      "description": "MGId the source of groupQuota.",
      "additionalProperties": {
        "type": "integer",
        "format": "int64",
        "description": "Group Quota assigned to subscription."
      }
    },
    "SubscriptionGroupQuotaAssignmentList": {
      "type": "array",
      "description": "Assigned Group Quota to subscriptions.",
      "items": {
        "$ref": "#/definitions/SubscriptionGroupQuotaAssignment"
      },
      "x-ms-identifiers": []
    },
    "SubscriptionQuotaLimit": {
      "type": "object",
      "description": "Subscription Quota limit.",
      "x-ms-azure-resource": true,
      "properties": {
        "id": {
          "description": "The resource ID.",
          "type": "string",
          "readOnly": true
        },
        "type": {
          "description": "The type.",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "description": "The resource name.",
          "type": "string",
          "readOnly": true
        },
        "properties": {
          "description": "Group Quota properties for the specified resource.",
          "$ref": "#/definitions/SubscriptionQuotaDetails"
        }
      }
    },
    "SubscriptionQuotaDetails": {
      "type": "object",
      "description": "Subscription Quota details.",
      "properties": {
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "The total quota limit for the subscription."
        },
        "nonShareableQuota": {
          "type": "integer",
          "format": "int64",
          "description": "The non shareable quota for the subscription."
        },
        "quotaSource": {
          "$ref": "#/definitions/SubscriptionGroupQuotaAssignmentList"
        }
      }
    },
    "SubscriptionQuotaDetailsList": {
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "description": "Subscription quota list.",
          "items": {
            "$ref": "#/definitions/SubscriptionQuotaLimit"
          }
        }
      }
    },
    "ResourceBaseRequest": {
      "type": "object",
      "description": "Resource definition with the requested quota.",
      "properties": {
        "resourceName": {
          "type": "string",
          "description": "The resource name, such as SKU name."
        },
        "limits": {
          "type": "integer",
          "description": "Quota requested for the resource.",
          "format": "int64"
        },
        "unit": {
          "type": "string",
          "readOnly": true,
          "description": "Representing the units of the usage quota. Possible values are: Count, Bytes, Seconds, Percent, CountPerSecond, BytesPerSecond. Based on - https://armwiki.azurewebsites.net/api_contracts/UsagesAPIContract.html?q=usages . Different RPs may have different units, Count, type as int64 should work for most of the integer values."
        }
      }
    },
    "ResourceRequest": {
      "type": "object",
      "properties": {
        "requestedResource": {
          "description": "Requested Resource.",
          "$ref": "#/definitions/ResourceBaseRequest"
        }
      }
    },
    "SubmittedResourceRequestStatus": {
      "type": "object",
      "properties": {
        "requestedResource": {
          "description": "Requested Resource.",
          "$ref": "#/definitions/ResourceBaseRequest"
        },
        "status": {
          "$ref": "#/definitions/RequestState",
          "readOnly": true
        }
      }
    },
    "SubmittedResourceRequestStatusList": {
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "description": "Subscription groupQuotaRequests list.",
          "items": {
            "$ref": "#/definitions/SubscriptionQuotaLimit"
          }
        }
      }
    },
    "SharedQuotaEntity": {
      "type": "object",
      "description": "Properties and filters for ShareQuota. The request parameter is optional, if there are no filters specified.",
      "x-ms-azure-resource": true,
      "properties": {
        "id": {
          "description": "Entity resource Id.",
          "type": "string",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "Type of the entity - Microsoft.Quota/SharedQuotaEntity.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The entity name. The entity name is provided in the request, so it is not needed in the request body. The response will include it.",
          "readOnly": true
        },
        "properties": {
          "subscriptionFilters": {
            "description": "Placeholder for filter. It will be expanded to include the list of operator, condition, operand.",
            "$ref": "#/definitions/Filters"
          }
        },
        "provisioningState": {
          "description": "provisioning state of the operation.",
          "$ref": "#/definitions/RequestState",
          "readOnly": true
        }
      }
    },
    "Filter": {
      "type": "object",
      "description": "Filter for SharedQuota Entity.",
      "properties": {
        "filterEntity": {
          "type": "string",
          "description": "Name of the entity for filter, such as billingId, offerType.",
          "enum": [
            "billingId",
            "offerType"
          ],
          "x-ms-enum": {
            "name": "SubscriptionFilterType",
            "modelAsString": true
          }
        },
        "operator": {
          "type": "string",
          "description": "Operator to use for comparison., such as eq (==), neq (!=), etc.",
          "enum": [
            "eq",
            "neq"
          ],
          "x-ms-enum": {
            "name": "SubscriptionFilterOperatorType",
            "modelAsString": true
          }
        },
        "filterValue": {
          "type": "string",
          "description": "Value for the filterEntity for comparison. Such as billingId, offerType value."
        }
      },
      "required": [
        "filterEntity",
        "operator",
        "filterValue"
      ]
    },
    "Filters": {
      "type": "object",
      "description": "Filters for subscription, which can use shared Quota Entity.",
      "properties": {
        "and": {
          "description": "The logical \"AND\" expression. It can have one or more filters.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Filter"
          },
          "x-ms-identifiers": [],
          "minItems": 0
        }
      }
    },
    "SharedQuotaEntityList": {
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "description": "Share Quota Entity list.",
          "items": {
            "$ref": "#/definitions/SharedQuotaEntity"
          }
        }
      }
    }
  },
  "parameters": {
    "RequestIdInParameters": {
      "name": "requestId",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "Request Id.",
      "x-ms-parameter-location": "method"
    },
    "ResourceInParameters": {
      "name": "resourceName",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "Resource name.",
      "x-ms-parameter-location": "method"
    },
    "AllocationIdInParameters": {
      "name": "allocationId",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "Resource allocation Id.",
      "x-ms-parameter-location": "method"
    },
    "SubscriptionIdInParameters": {
      "name": "subscriptionId",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "Subscription Id.",
      "x-ms-parameter-location": "method"
    },
    "MgIdInParameters": {
      "name": "mgId",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "Management Group Id.",
      "x-ms-parameter-location": "method"
    },
    "SharedQuotaEntityNameInParameters": {
      "name": "sharedQuotaEntityName",
      "in": "path",
      "required": true,
      "pattern": "^[a-z][a-z0-9]*$",
      "minLength": 3,
      "maxLength": 63,
      "type": "string",
      "description": "The SharedQuotaEntity name. The name should be unique for the provided context tenantId/MgId.",
      "x-ms-parameter-location": "method"
    },
    "apiVersionParameter": {
      "name": "api-version",
      "in": "query",
      "required": true,
      "x-ms-parameter-location": "client",
      "type": "string",
      "description": "Version of the API to be used with the client request. The current version is 2023-06-01-preview.",
      "minLength": 1
    },
    "ScopeInParameters": {
      "name": "scope",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "Scope for the resource. Some resources do not require location parameter, such as CosmosDb, so can be skipped in scope. For most of the resources require - providers/Microsoft.Compute/locations/{locationName}. Some Rps such as Batch requires batchAccountName - providers/Microsoft.Batch/locations/{locationName}/accountName/{batchAccountName}. This extension enables to specify resources for any all the RPs.",
      "x-ms-parameter-location": "method"
    }
  }
}

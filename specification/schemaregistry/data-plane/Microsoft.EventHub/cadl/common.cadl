import "@cadl-lang/rest";
import "@cadl-lang/openapi";

using Cadl.Http;
using OpenAPI;

////////////////////////////////////
// SWAGGER: "parameters" SECTION //
////////////////////////////////////
model ApiVersionParameter {
  @doc("Schema Registry service API version that should be used.")
  @query
  "api-version": string;
}

model Endpoint {
  @doc("The Schema Registry service endpoint, for example my-namespace.servicebus.windows.net.")
  @path
  @extension("x-ms-skip-url-encoding", true)
  @extension("x-ms-parameter-location", "client")
  "endpoint": string;
}

model SchemaName {
  @doc("Name of schema.")
  @path
  @maxLength(50)
  @pattern("^[A-Za-z0-9][^\\\\/$:]*$")
  @extension("x-ms-parameter-location", "method")
  "schemaName": string;
}

model SchemaContent {
  @doc("String representation (UTF-8) of the registered schema.")
  @body
  schemaContent: string; // TODO: type string but format binary?
}
////////////////////////////////////
//        END "parameters"        //
////////////////////////////////////

////////////////////////////////////
// SWAGGER: "definitions" SECTION //
////////////////////////////////////
@doc("Object received from the registry containing schema identifiers.")
model SchemaId{
  @doc("Schema ID that uniquely identifies a schema in the registry namespace.")
  @path
  id: string;
}

@doc("Name of individual schema group in list of schema groups.")
model SchemaGroup {
  @path
  groupName: string;
}

@doc("Array received from the registry containing the list of schema groups.")
model SchemaGroups {
  @doc("Array of schema groups.")
  schemaGroups?: SchemaGroup[];
}

@doc("Version number of specific schema.")
model SchemaVersion {
  schemaVersion: int32; // TODO: check if int64
}

@doc("Array received from the registry containing the list of versions for specific schema.")
model SchemaVersions {
  @doc("Array of schema groups.")
  schemaVersions?: SchemaVersion[];
}

@doc("An error response returned from Azure Schema Registry service.")
@error
model Error {
  @header
  @doc("Error code for specific error that occurred.")
  "x-ms-error-code": string;
  error: ErrorDetail;
}

@doc("Error response returned from Azure Schema Registry service.")
model ErrorDetail {
  @doc("Type of error.")
  code: string;
  @doc("Brief description of error.")
  message: string;
  @doc("Error message details to help user understand/debug failure.")
  details?: ErrorDetail;
}
////////////////////////////////////
//        END "definitions"       //
////////////////////////////////////

/////////////////////////////////////
//   SWAGGER: responses to paths   //
/////////////////////////////////////
alias OkWithError<T> = OkResponse<T> | Error; // TODO: should 200 description be OK?

@doc("Binary representation of the registered schema.")
model BinarySchema is bytes;

model SchemaMetadataResponse {
  @statusCode
  @doc("No Content")
  statusCode: 204;
  @header
  @doc("URL location of schema, identified by schema group, schema name, and version.")
  "Location": string;
  @header
  @doc("References specific schema in registry namespace.")
  "Schema-Id": string;
  @header
  @doc("URL location of schema, identified by schema ID.")
  "Schema-Id-Location": string;
  @header
  @doc("References schema group.")
  "Schema-Group-Name": string;
  @header
  @doc("References schema name.")
  "Schema-Name": string;
  @header
  @doc("Version of the returned schema.")
  "Schema-Version": int32;
}

/////////////////////////////////////
//          END responses          //
/////////////////////////////////////
// Original Swagger: https://github.com/Azure/azure-rest-api-specs/blob/main/specification/schemaregistry/data-plane/Microsoft.EventHub/stable/2021-10/schemaregistry.json

import "@azure-tools/cadl-azure-core";
import "@azure-tools/cadl-autorest";
import "@cadl-lang/rest";
import "@cadl-lang/versioning";
import "@cadl-lang/openapi";
import "./common.cadl";

using Autorest;
using OpenAPI;
using Cadl.Http;
using Cadl.Versioning;

///////////////////////////////
//  SWAGGER: "info" SECTION  //
///////////////////////////////
@serviceTitle("Azure Schema Registry")
@serviceVersion("2021-10")
@doc("Azure Schema Registry is as a central schema repository, with support for versioning, management, compatibility checking, and RBAC.")
@server("{endpoint}", "Azure Schema Registry Service", Endpoint)
@Cadl.Rest.produces("application/json"; "application/json; serialization=Avro")
@Cadl.Rest.consumes("application/json; serialization=Avro")
namespace Azure.SchemaRegistry;

///////////////////////////////
//         END "info"        //
///////////////////////////////

///////////////////////////////
// SWAGGER: "paths" SECTION  //
///////////////////////////////
interface SchemaRegistry {
    @route("/$schemaGroups")
    @get
    @summary("Get list of schema groups.")
    @doc("Gets the list of schema groups user is authorized to access.")
    // TODO: example not working
    @example("../stable/2021-10/examples/OperationSchema_GetSchemaGroups.json", "Get schema groups")
    //// TODO: operationId
    //// TODO: @Cadl.Rest.produces("application/json")
    getSchemaGroups(
        ...ApiVersionParameter
    ): OkWithError<SchemaGroups>;

    @route("/$schemaGroups/$schemas/{id}")
    @get
    @summary("Get a registered schema by its unique ID reference.")
    @doc("Gets a registered schema by its unique ID.  Azure Schema Registry guarantees that ID is unique within a namespace. Operation response type is based on serialization of schema requested.")
    // TODO: example not working
    @example("../stable/2021-10/examples/OperationSchema_GetById.json", "Get schema by ID")
    // TODO: operationId
    // TODO: @produces("application/json; serialization=Avro")
    getSchemaById(
        ...SchemaId,     // TODO: should parameter for schema id be different from SchemaId
        ...ApiVersionParameter
    ): OkWithError<BinarySchema>;  // TODO: create more accurate response object for error

    @route("/$schemaGroups/{groupName}/schemas/{schemaName}/versions")
    @get
    @summary("Get list schema versions.")
    @doc("Gets the list of all versions of one schema.")
    // TODO: example not working
    @example("../stable/2021-10/examples/OperationSchema_GetSchemaVersions.json", "Get schema versions")
    // TODO: operationId
    // TODO: @produces("application/json")
    getSchemaVersions(
        ...SchemaGroup, // TODO: should there be a separate parameter model?
        ...SchemaName,
        ...ApiVersionParameter
    ): OkWithError<SchemaVersions>;  // TODO: create more accurate response object for error

    @route("/$schemaGroups/{groupName}/schemas/{schemaName}:get-id")
    @get
    @summary("Get ID for existing schema.")
    @doc("Gets the ID referencing an existing schema within the specified schema group, as matched by schema content comparison.")
    // TODO: example not working
    @example("../stable/2021-10/examples/OperationSchema_QueryIdByContent.json", "Get schema Id")
    // TODO: operationId
    // TODO: @consumes("application/json; serialization=Avro")
    // TODO: @produces("application/json")
    getIdByContent(
        ...SchemaGroup, // TODO: should there be a separate parameter model?
        ...SchemaName,
        ...SchemaContent,
        ...ApiVersionParameter
    ): {
        ...SchemaMetadataResponse
    } | {
        // TODO: figure out how to get this description instead of Client Error
        @doc("Unsupported Media Type - Content type of the supplied schema is unsupported by schema group.")
        @statusCode statusCode: 415;
        // TODO: "x-ms-error-response": true
        ...Error
    } | Error;

    @route("/$schemaGroups/{groupName}/schemas/{schemaName}")
    @put
    @summary("Register new schema")
    @doc("Register new schema. If schema of specified name does not exist in specified group, schema is created at version 1. If schema of specified name exists already in specified group, schema is created at latest version + 1.\n")
    // TODO: example not working
    @example("../stable/2021-10/examples/OperationSchema_Register.json", "Register schema")
    // TODO: operationId
    // TODO: @consumes("application/json; serialization=Avro")
    // TODO: @produces("application/json")
    registerSchema(
        ...SchemaGroup, // TODO: should there be a separate parameter model?
        ...SchemaName,
        ...SchemaContent,   // TODO: figure out why body param is not showing up in openapi
        ...ApiVersionParameter
    ): {
        ...SchemaMetadataResponse
    } | {
        // TODO: figure out how to get this description instead of Client Error
        @doc("Unsupported Media Type - Content type of the supplied schema is unsupported by schema group.")
        @statusCode statusCode: 415;
        // TODO: "x-ms-error-response": true
        ...Error
    } | Error;
}
///////////////////////////////
//        END "paths"        //
///////////////////////////////

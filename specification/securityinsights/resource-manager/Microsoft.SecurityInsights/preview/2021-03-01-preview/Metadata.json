{
  "swagger": "2.0",
  "info": {
    "title": "Security Insights",
    "description": "API spec for Microsoft.SecurityInsights (Azure Security Insights) resource provider",
    "version": "2021-03-01-preview"
  },
  "host": "management.azure.com",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "security": [
    {
      "azure_auth": [
        "user_impersonation"
      ]
    }
  ],
  "securityDefinitions": {
    "azure_auth": {
      "type": "oauth2",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "flow": "implicit",
      "description": "Azure Active Directory OAuth2 Flow",
      "scopes": {
        "user_impersonation": "impersonate your user account"
      }
    }
  },
  "paths": {
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{operationalInsightsResourceProvider}/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/metadata": {
      "get": {
        "x-ms-examples": {
          "Get all metadata.": {
            "$ref": "./examples/metadata/GetAllMetadata.json"
          },
          "Get all metadata with OData filter/orderby/skip/top": {
            "$ref": "./examples/metadata/GetAllMetadataOData.json"
          }
        },
        "tags": [
          "Metadata"
        ],
        "description": "List of all metadata",
        "operationId": "Metadata_List",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "../../../common/1.0/types.json#/parameters/OperationalInsightsResourceProvider"
          },
          {
            "$ref": "../../../common/1.0/types.json#/parameters/WorkspaceName"
          },
          {
            "$ref": "../../../common/1.0/types.json#/parameters/ODataFilter"
          },
          {
            "$ref": "../../../common/1.0/types.json#/parameters/ODataOrderBy"
          },
          {
            "$ref": "../../../common/1.0/types.json#/parameters/ODataTop"
          },
          {
            "$ref": "../../../common/1.0/types.json#/parameters/ODataSkip"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MetadataList"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../common/1.0/types.json#/definitions/CloudError"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{operationalInsightsResourceProvider}/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/metadata/{metadataName}": {
      "get": {
        "x-ms-examples": {
          "Get single metadata by name": {
            "$ref": "./examples/metadata/GetMetadata.json"
          }
        },
        "tags": [
          "Metadata"
        ],
        "description": "Get a Metadata.",
        "operationId": "Metadata_Get",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "../../../common/1.0/types.json#/parameters/OperationalInsightsResourceProvider"
          },
          {
            "$ref": "../../../common/1.0/types.json#/parameters/WorkspaceName"
          },
          {
            "$ref": "#/parameters/MetadataName"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MetadataModel"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../common/1.0/types.json#/definitions/CloudError"
            }
          }
        }
      },
      "delete": {
        "x-ms-examples": {
          "Delete metadata.": {
            "$ref": "./examples/metadata/DeleteMetadata.json"
          }
        },
        "tags": [
          "Metadata"
        ],
        "description": "Delete a Metadata.",
        "operationId": "Metadata_Delete",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "../../../common/1.0/types.json#/parameters/OperationalInsightsResourceProvider"
          },
          {
            "$ref": "../../../common/1.0/types.json#/parameters/WorkspaceName"
          },
          {
            "$ref": "#/parameters/MetadataName"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../common/1.0/types.json#/definitions/CloudError"
            }
          }
        }
      },
      "put": {
        "x-ms-examples": {
          "Create/update full metadata.": {
            "$ref": "./examples/metadata/PutMetadata.json"
          },
          "Create/update minimal metadata.": {
            "$ref": "./examples/metadata/PutMetadataMinimal.json"
          }
        },
        "tags": [
          "Metadata"
        ],
        "description": "Create a Metadata.",
        "operationId": "Metadata_Create",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "../../../common/1.0/types.json#/parameters/OperationalInsightsResourceProvider"
          },
          {
            "$ref": "../../../common/1.0/types.json#/parameters/WorkspaceName"
          },
          {
            "$ref": "#/parameters/MetadataName"
          },
          {
            "$ref": "#/parameters/Metadata"
          }
        ],
        "responses": {
          "200": {
            "description": "OK, Operation successfully completed",
            "schema": {
              "$ref": "#/definitions/MetadataModel"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/MetadataModel"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../common/1.0/types.json#/definitions/CloudError"
            }
          }
        }
      },
      "patch": {
        "x-ms-examples": {
          "Update metadata.": {
            "$ref": "./examples/metadata/PatchMetadata.json"
          }
        },
        "tags": [
          "Metadata"
        ],
        "description": "Update an existing Metadata.",
        "operationId": "Metadata_Update",
        "parameters": [
          {
            "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "../../../../../common-types/resource-management/v2/types.json#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "../../../common/1.0/types.json#/parameters/OperationalInsightsResourceProvider"
          },
          {
            "$ref": "../../../common/1.0/types.json#/parameters/WorkspaceName"
          },
          {
            "$ref": "#/parameters/MetadataName"
          },
          {
            "$ref": "#/parameters/MetadataPatch"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MetadataModel"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "../../../common/1.0/types.json#/definitions/CloudError"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "MetadataList": {
      "description": "List of all the metadata.",
      "type": "object",
      "properties": {
        "value": {
          "description": "Array of metadata.",
          "items": {
            "$ref": "#/definitions/MetadataModel"
          },
          "type": "array"
        },
        "nextLink": {
          "description": "URL to fetch the next page of metadata.",
          "readOnly": true,
          "type": "string"
        }
      },
      "required": [
        "value"
      ]
    },
    "MetadataModel": {
      "type": "object",
      "allOf": [
        {
          "$ref": "../../../common/1.0/types.json#/definitions/ResourceWithEtag"
        }
      ],
      "description": "Metadata resource definition.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/metadataProperties",
          "description": "Metadata properties",
          "x-ms-client-flatten": true
        }
      }
    },
    "metadataPatch": {
      "allOf": [
        {
          "$ref": "../../../common/1.0/types.json#/definitions/ResourceWithEtag"
        }
      ],
      "description": "Metadata patch request body.",
      "type": "object",
      "properties": {
        "properties": {
          "$ref": "#/definitions/metadataPropertiesPatch",
          "description": "Metadata patch request body",
          "x-ms-client-flatten": true
        }
      }
    },
    "metadataProperties": {
      "description": "Metadata property bag.",
      "required": [
        "parentId",
        "kind"
      ],
      "type": "object",
      "properties": {
        "contentId": {
          "$ref": "./common/ContentCommonTypes.json#/definitions/metadataContentId",
          "description": "Static ID for the content.  Used to identify dependencies and content from solutions or community.  Hard-coded/static for out of the box content and solutions. Dynamic for user-created.  This is the resource name"
        },
        "parentId": {
          "$ref": "./common/ContentCommonTypes.json#/definitions/metadataParentId",
          "description": "Full parent resource ID of the content item the metadata is for.  This is the full resource ID including the scope (subscription and resource group)"
        },
        "version": {
          "$ref": "./common/ContentCommonTypes.json#/definitions/metadataVersion",
          "description": "Version of the content.  Default and recommended format is numeric (e.g. 1, 1.0, 1.0.0, 1.0.0.0), following ARM template best practices.  Can also be any string, but then we cannot guarantee any version checks"
        },
        "kind": {
          "$ref": "./common/ContentCommonTypes.json#/definitions/metadataKind",
          "description": "The kind of content the metadata is for."
        },
        "source": {
          "$ref": "./common/ContentCommonTypes.json#/definitions/metadataSource",
          "description": "Source of the content.  This is where/how it was created."
        },
        "author": {
          "$ref": "./common/ContentCommonTypes.json#/definitions/metadataAuthor",
          "description": "The creator of the content item."
        },
        "support": {
          "$ref": "./common/ContentCommonTypes.json#/definitions/metadataSupport",
          "description": "Support information for the metadata - type, name, contact information"
        },
        "dependencies": {
          "$ref": "./common/ContentCommonTypes.json#/definitions/metadataDependencies",
          "description": "Dependencies for the content item, what other content items it requires to work.  Can describe more complex dependencies using a recursive/nested structure. For a single dependency an id/kind/version can be supplied or operator/criteria for complex formats."
        },
        "categories": {
          "$ref": "./common/ContentCommonTypes.json#/definitions/metadataCategories",
          "description": "Categories for the solution content item"
        },
        "providers": {
          "$ref": "./common/ContentCommonTypes.json#/definitions/metadataProviders",
          "description": "Providers for the solution content item"
        },
        "firstPublishDate": {
          "$ref": "./common/ContentCommonTypes.json#/definitions/metadataFirstPublishDate",
          "description": "first publish date solution content item"
        },
        "lastPublishDate": {
          "$ref": "./common/ContentCommonTypes.json#/definitions/metadataLastPublishDate",
          "description": "last publish date for the solution content item"
        }
      }
    },
    "metadataPropertiesPatch": {
      "description": "Metadata property bag for patch requests.  This is the same as the MetadataProperties, but with nothing required",
      "type": "object",
      "properties": {
        "contentId": {
          "$ref": "./common/ContentCommonTypes.json#/definitions/metadataContentId",
          "description": "Static ID for the content.  Used to identify dependencies and content from solutions or community.  Hard-coded/static for out of the box content and solutions. Dynamic for user-created.  This is the resource name"
        },
        "parentId": {
          "$ref": "./common/ContentCommonTypes.json#/definitions/metadataParentId",
          "description": "Full parent resource ID of the content item the metadata is for.  This is the full resource ID including the scope (subscription and resource group)"
        },
        "version": {
          "$ref": "./common/ContentCommonTypes.json#/definitions/metadataVersion",
          "description": "Version of the content.  Default and recommended format is numeric (e.g. 1, 1.0, 1.0.0, 1.0.0.0), following ARM template best practices.  Can also be any string, but then we cannot guarantee any version checks"
        },
        "kind": {
          "$ref": "./common/ContentCommonTypes.json#/definitions/metadataKind",
          "description": "The kind of content the metadata is for."
        },
        "source": {
          "$ref": "./common/ContentCommonTypes.json#/definitions/metadataSource",
          "description": "Source of the content.  This is where/how it was created."
        },
        "author": {
          "$ref": "./common/ContentCommonTypes.json#/definitions/metadataAuthor",
          "description": "The creator of the content item."
        },
        "support": {
          "$ref": "./common/ContentCommonTypes.json#/definitions/metadataSupport",
          "description": "Support information for the metadata - type, name, contact information"
        },
        "dependencies": {
          "$ref": "./common/ContentCommonTypes.json#/definitions/metadataDependencies",
          "description": "Dependencies for the content item, what other content items it requires to work.  Can describe more complex dependencies using a recursive/nested structure. For a single dependency an id/kind/version can be supplied or operator/criteria for complex formats."
        },
        "categories": {
          "$ref": "./common/ContentCommonTypes.json#/definitions/metadataCategories",
          "description": "Categories for the solution content item"
        },
        "providers": {
          "$ref": "./common/ContentCommonTypes.json#/definitions/metadataProviders",
          "description": "Providers for the solution content item"
        },
        "firstPublishDate": {
          "$ref": "./common/ContentCommonTypes.json#/definitions/metadataFirstPublishDate",
          "description": "first publish date solution content item"
        },
        "lastPublishDate": {
          "$ref": "./common/ContentCommonTypes.json#/definitions/metadataLastPublishDate",
          "description": "last publish date for the solution content item"
        }
      }
    }
  },
  "parameters": {
    "Metadata": {
      "description": "Metadata resource.",
      "in": "body",
      "name": "metadata",
      "required": true,
      "schema": {
        "$ref": "#/definitions/MetadataModel"
      },
      "x-ms-parameter-location": "method"
    },
    "MetadataPatch": {
      "description": "Partial metadata request.",
      "in": "body",
      "name": "metadataPatch",
      "required": true,
      "schema": {
        "$ref": "#/definitions/metadataPatch"
      },
      "x-ms-parameter-location": "method"
    },
    "MetadataName": {
      "description": "The Metadata name.",
      "in": "path",
      "name": "metadataName",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "SubscriptionId": {
      "description": "Azure subscription ID",
      "in": "path",
      "name": "subscriptionId",
      "pattern": "^[0-9A-Fa-f]{8}-([0-9A-Fa-f]{4}-){3}[0-9A-Fa-f]{12}$",
      "required": true,
      "type": "string"
    },
    "ResourceGroupName": {
      "description": "The name of the resource group within the user's subscription. The name is case insensitive.",
      "in": "path",
      "maxLength": 90,
      "minLength": 1,
      "name": "resourceGroupName",
      "pattern": "^[-\\w\\._\\(\\)]+$",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "WorkspaceName": {
      "description": "The name of the workspace.",
      "in": "path",
      "name": "workspaceName",
      "maxLength": 90,
      "minLength": 1,
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "OperationalInsightsResourceProvider": {
      "description": "The namespace of workspaces resource provider- Microsoft.OperationalInsights.",
      "in": "path",
      "name": "operationalInsightsResourceProvider",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    }
  }
}
